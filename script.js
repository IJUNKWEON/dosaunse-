// 운세 데이터 - 향상된 버전
const fortuneData = {
    today: {
        title: "오늘의 운세",
        fortunes: [
            {
                main: "오늘은 새로운 시작을 알리는 날입니다. 마음의 여유를 갖고 주변 사람들과의 관계에 신경 써보세요. 예상치 못한 기쁜 소식이 있을 수 있으니 긍정적인 마음을 유지하시기 바랍니다. 특히 오후 2시 이후부터는 중요한 결정을 내리기에 좋은 시간대입니다. 직감을 믿고 행동하되, 신중함도 잃지 마세요.",
                advice: ["금전 관리에 주의를 기울이세요", "건강을 위해 충분한 수분 섭취를 하시기 바랍니다"],
                lucky: {
                    color: "하늘색",
                    number: "7",
                    item: "파란색 액세서리"
                }
            },
            {
                main: "평온하고 안정적인 하루가 될 것 같습니다. 가족이나 가까운 친구들과 좋은 시간을 보내게 될 것이며, 작은 행복을 발견할 수 있는 날입니다. 업무나 학업에서는 꾸준함이 가장 중요한 하루입니다. 급하게 서두르지 말고 차근차근 진행하시면 예상보다 좋은 결과를 얻을 수 있을 것입니다.",
                advice: ["저녁에는 충분한 휴식을 취하세요", "중요한 약속은 오전 중에 잡는 것이 좋습니다"],
                lucky: {
                    color: "연두색",
                    number: "3",
                    item: "향초나 디퓨저"
                }
            }
        ]
    },
    tomorrow: {
        title: "내일의 운세",
        fortunes: [
            {
                main: "내일은 변화의 바람이 불어오는 특별한 날입니다. 새로운 기회가 찾아올 수 있으니 열린 마음으로 맞이하세요. 특히 인간관계에서 예상치 못한 좋은 변화가 있을 것으로 보입니다. 오전에는 집중력이 최고조에 달해 중요한 일을 처리하기에 완벽한 시간입니다. 오후에는 여유를 갖고 주변을 돌아보며 새로운 아이디어를 얻을 수 있을 것입니다.",
                advice: ["수분 섭취를 충분히 하세요", "가벼운 운동으로 몸과 마음을 준비하세요"],
                lucky: {
                    color: "노란색",
                    number: "9",
                    item: "작은 식물이나 꽃"
                }
            },
            {
                main: "안정적이고 평화로운 하루가 예상됩니다. 계획했던 일들이 순조롭게 진행될 것이며, 주변 사람들로부터 따뜻한 도움을 받을 수 있을 것입니다. 재정관리에 신경을 쓰기 좋은 날이며, 미래를 위한 구체적인 계획을 세우기에도 적합한 시기입니다. 저녁에는 취미활동이나 자기계발에 시간을 투자하면 뜻밖의 좋은 성과를 얻을 수 있을 것입니다.",
                advice: ["장기적인 목표를 점검해보세요", "가족과의 시간을 소중히 여기세요"],
                lucky: {
                    color: "보라색",
                    number: "5",
                    item: "좋아하는 책 한 권"
                }
            }
        ]
    },
    month: {
        title: "이달의 운세",
        fortunes: [
            {
                main: "이번 달은 전반적으로 상승세를 타는 특별한 달입니다. 노력한 만큼의 성과를 거두게 되며, 특히 중순 이후부터는 더욱 좋은 기운이 함께할 것입니다. 인간관계에서 의미 있는 새로운 만남이 있을 수 있으며, 기존의 관계도 한층 더 깊어질 것입니다. 월말에는 가족이나 친구들과 함께하는 시간이 예상치 못한 행운을 가져다줄 것입니다.",
                advice: ["규칙적인 생활 패턴을 유지하세요", "투자보다는 저축에 집중하는 것이 좋습니다"],
                lucky: {
                    color: "금색",
                    number: "8",
                    item: "작은 거울이나 반짝이는 장식품"
                }
            },
            {
                main: "안정감 있고 차분한 한 달이 될 것 같습니다. 큰 변화보다는 차근차근 발전해 나가는 시기로, 기본기를 탄탄히 다지기에 완벽한 때입니다. 업무나 학업에서는 꾸준한 노력이 빛을 발하게 될 것이며, 주변 사람들의 진심 어린 인정을 받을 수 있을 것입니다. 이달 중순경에는 기다렸던 좋은 소식이나 새로운 기회가 찾아올 것입니다.",
                advice: ["건강 관리를 소홀히 하지 마세요", "준비된 자세로 기회를 맞이하세요"],
                lucky: {
                    color: "은색",
                    number: "2",
                    item: "조용한 음악이나 명상 앱"
                }
            }
        ]
    },
    year: {
        title: "올해의 운세", 
        fortunes: [
            {
                main: "올해는 인생의 중요한 전환점이 되는 특별한 해입니다. 지금까지 차근차근 쌓아온 모든 경험과 노력이 빛나는 결실을 맺게 되는 시기로, 자신감을 갖고 새로운 도전에 나서시기 바랍니다. 상반기에는 탄탄한 기반을 다지는 시기이며, 하반기부터는 본격적인 성과와 성공을 거둘 수 있을 것입니다. 특히 가을철에는 평생 기억에 남을 큰 기회가 찾아올 것이니 완벽한 준비로 맞이하세요.",
                advice: ["정기적인 건강 검진을 받으세요", "계획적인 투자와 저축에 집중하세요"],
                lucky: {
                    color: "진보라색",
                    number: "21",
                    item: "고급스러운 펜이나 다이어리"
                }
            },
            {
                main: "전체적으로 안정감 있으면서도 꾸준한 발전이 기대되는 의미 있는 해가 될 것입니다. 큰 변동이나 위기 없이 차근차근 성장해 나갈 수 있는 이상적인 한 해로 보입니다. 봄철에는 희망찬 새로운 시작이나 계획을 세우기에 완벽하며, 여름철에는 활발하고 역동적인 활동으로 눈에 띄는 성과를 거둘 수 있을 것입니다. 가을철에는 기다렸던 결실을 맺는 기쁜 시기이며, 겨울철에는 새로운 도약을 위한 준비의 시간이 될 것입니다.",
                advice: ["규칙적인 생활과 적당한 운동을 유지하세요", "가족과의 소중한 시간을 늘려가세요"],
                lucky: {
                    color: "따뜻한 갈색",
                    number: "12",
                    item: "나무로 만든 소품이나 가구"
                }
            }
        ]
    },
    lifetime: {
        title: "평생 운세",
        fortunes: [
            {
                main: "타고난 복과 지혜를 가지고 계신 매우 특별한 분입니다. 전반적인 운세가 상당히 좋은 편이며, 특히 중년 이후에 큰 성취와 명예를 이루실 것으로 보입니다. 젊은 시절에는 다소 고생을 하실 수 있으나, 이는 더 큰 성공을 위한 소중한 밑거름이 될 것입니다. 30대 후반부터는 운세가 본격적으로 상승하기 시작하여, 40대에는 확고한 기반을 구축하실 것입니다. 인간관계에서는 평생에 걸쳐 좋은 인연들을 많이 만나시며, 특히 배우자와의 인연이 매우 깊고 아름다운 것으로 보입니다.",
                advice: ["중년 이후 소화기 계통 건강에 주의하세요", "꾸준한 자기계발과 학습을 게을리하지 마세요"],
                lucky: {
                    color: "자주색",
                    number: "99",
                    item: "전통적인 장신구나 보석"
                }
            },
            {
                main: "성실하고 꾸준한 성격으로 평생에 걸쳐 착실하게 인생을 살아가실 분입니다. 큰 기복이나 변동 없이 안정적이고 평화로운 삶을 영위하실 것으로 보입니다. 젊은 시절부터 중년까지 꾸준한 발전을 이루시며, 노년에는 편안하고 여유로운 황금빛 인생을 맞이하실 수 있을 것입니다. 특히 학문이나 기술 분야에서 남다른 재능을 발휘하시고 인정받으실 것으로 보입니다. 가족운이 매우 좋아 화목하고 사랑이 넘치는 가정을 이루실 것이며, 사회적으로도 신뢰받는 위치에 오르실 것입니다.",
                advice: ["규칙적인 건강관리로 장수하세요", "가족과의 소중한 시간을 항상 우선시하세요"],
                lucky: {
                    color: "담청색",
                    number: "66",
                    item: "가족사진이 담긴 액자"
                }
            }
        ]
    },
    tojung: {
        title: "토정비결",
        fortunes: [
            {
                main: "하늘의 기운이 당신을 특별히 보호하고 돕고 있습니다. 올해는 특히 봄철과 가을철에 인생을 바꿀 만한 큰 기회가 찾아올 것이니, 항상 준비된 마음과 자세로 임하시기 바랍니다. 동쪽과 남쪽 방향이 대길하며, 이 방향으로 나가거나 이사, 이직 등을 고려해보시기 바랍니다. 사업이나 새로운 계획이 있으시다면 음력 3월과 9월이 최적의 시기가 될 것입니다. 인간관계에서는 연장자나 경험이 많은 분의 조언을 구하시면 큰 도움이 될 것이며, 그분들을 통해 귀인을 만날 수도 있습니다.",
                advice: ["심장과 위장 건강에 특별히 주의하세요", "차가운 음식보다는 따뜻한 음식을 드세요"],
                lucky: {
                    color: "붉은색과 푸른색",
                    number: "3, 7, 9",
                    item: "동쪽 방향의 작은 종이나 방울"
                }
            },
            {
                main: "땅의 깊고 든든한 기운이 당신을 안정적으로 보호하고 있습니다. 올해는 안정과 발전이 조화롭게 함께하는 해로, 기다림의 미학과 인내의 힘을 발휘하시면 예상보다 훨씬 좋은 결과를 얻을 수 있을 것입니다. 서쪽과 북쪽이 길방이며, 이 방향과 관련된 모든 일들이 순조롭게 풀릴 것입니다. 금전관리에 특별히 신경을 쓰시고, 부동산이나 토지와 관련된 투자나 거래에 관심을 가져보시기 바랍니다. 가족 중 여성 어른의 의견과 조언을 존중하고 따르시면 뜻밖의 좋은 일이 생길 것입니다.",
                advice: ["관절과 근육 건강에 주의하고 꾸준한 운동을 하세요", "재정 계획을 신중하게 세우고 실천하세요"],
                lucky: {
                    color: "흰색과 검은색",
                    number: "2, 6, 8",
                    item: "서쪽 방향의 작은 거울이나 금속 장식품"
                }
            }
        ]
    },
    wealth: {
        title: "재물운",
        fortunes: [
            {
                main: "재물운이 매우 상승세에 있어 금전적으로 풍요로운 시기를 맞이하게 될 것입니다. 주수입원이 안정적일 뿐만 아니라 예상치 못한 부수입도 기대할 수 있는 상황입니다. 특히 하반기에는 큰 목돈이 들어올 가능성이 높으며, 투자나 사업 확장을 고려해볼 만한 시기입니다. 부동산이나 안전한 금융상품에 대한 투자가 좋은 선택이 될 것이며, 전문가의 조언을 구한다면 더욱 현명한 결정을 내릴 수 있을 것입니다. 사업을 하고 계신다면 확장이나 새로운 분야 진출의 기회가 찾아올 것입니다.",
                advice: ["위험한 투자는 피하고 안전한 투자에 집중하세요", "가족이나 친구와의 금전 거래는 신중하게 하세요"],
                lucky: {
                    color: "황금색",
                    number: "888",
                    item: "작은 황금 장식품이나 동전"
                }
            },
            {
                main: "재물운이 전반적으로 안정적인 상태로 큰 손실을 볼 위험은 적지만, 단기간에 큰 수익을 기대하기는 어려운 시기입니다. 이런 때일수록 꾸준한 절약 정신과 계획적인 저축이 가장 중요합니다. 월급쟁이라면 부업이나 투잡을 통한 추가 수입을 고려해볼 수 있는 시기이며, 특히 자신의 전문성과 경험을 살린 부업이 좋은 성과를 가져다줄 것입니다. 투자보다는 저축에 집중하시고, 가계부를 꼼꼼히 작성하여 체계적인 가계 관리를 하시기 바랍니다. 연말쯤에는 예상치 못한 보너스나 수입이 생길 수 있습니다.",
                advice: ["불필요한 지출을 줄이고 목적 있는 소비를 하세요", "재정 계획을 세워 체계적으로 관리하세요"],
                lucky: {
                    color: "안정적인 녹색",
                    number: "555",
                    item: "저축을 위한 예쁜 저금통"
                }
            }
        ]
    },
    business: {
        title: "사업운",
        fortunes: [
            {
                main: "사업운이 절정에 달해 있어 새로운 사업을 시작하거나 기존 사업을 대폭 확장하기에 최적의 시기입니다. 특히 서비스업, IT 관련 사업, 온라인 비즈니스 분야가 매우 유망하며 큰 성공을 거둘 수 있을 것입니다. 파트너십 체결이나 투자 유치도 순조롭게 진행될 것이며, 뜻밖의 좋은 제안이나 기회가 찾아올 수 있습니다. 직원 채용이나 조직 확대를 고려하고 계시다면 지금이 최적의 타이밍이며, 능력 있고 헌신적인 인재들을 만날 가능성이 높습니다. 해외 진출이나 수출입 업무, 새로운 시장 개척에도 적극적으로 나서시기 바랍니다.",
                advice: ["계약서나 법적 문서는 전문가의 도움을 받으세요", "자금 관리는 보수적으로 접근하는 것이 좋습니다"],
                lucky: {
                    color: "역동적인 오렌지색",
                    number: "777",
                    item: "사업 성공을 상징하는 작은 황소 장식품"
                }
            },
            {
                main: "사업운이 안정적인 상태로 큰 도약보다는 기존 사업의 내실을 다지고 기반을 탄탄히 하는 것이 가장 중요한 시기입니다. 무리한 확장보다는 현재 상황을 차분히 점검하고 개선점을 찾아 보완하는 데 집중하세요. 기존 고객과의 관계를 더욱 돈독히 하고, 서비스나 제품의 품질 향상에 투자하시기 바랍니다. 새로운 사업 아이템이나 아이디어가 있다면 충분한 시장조사와 준비 기간을 거쳐 신중하게 접근하는 것이 좋겠습니다. 직원들과의 소통을 늘리고 근무환경 개선, 교육 투자에도 관심을 가지시면 장기적으로 큰 도움이 될 것입니다.",
                advice: ["현재 사업의 기본기를 다시 한번 점검해보세요", "직원들의 만족도와 근무환경 개선에 투자하세요"],
                lucky: {
                    color: "신뢰의 파란색",
                    number: "444",
                    item: "사무실에 둘 수 있는 작은 관엽식물"
                }
            }
        ]
    },
    study: {
        title: "학업운",
        fortunes: [
            {
                main: "학업운이 최고조에 달해 있어 공부하는 모든 분야에서 놀라운 성과를 거둘 수 있을 것입니다. 집중력과 기억력이 크게 향상되어 공부한 내용이 머릿속에 선명하게 각인될 것이며, 특히 오전 시간대의 학습 효과가 매우 뛰어날 것입니다. 시험을 앞두고 계신 분들은 자신감을 갖고 임하시기 바랍니다. 다만 자만하지 말고 끝까지 최선을 다하는 자세가 중요합니다. 새로운 분야의 공부나 자격증 취득에 도전하기에도 완벽한 시기이며, 외국어 학습이나 온라인 강의, 스터디 그룹 참여도 큰 효과를 볼 수 있을 것입니다.",
                advice: ["모의고사나 연습문제를 많이 풀어보세요", "선생님이나 멘토의 조언을 적극 수용하세요"],
                lucky: {
                    color: "지혜의 남색",
                    number: "111",
                    item: "새로운 필기구나 고급 노트"
                }
            },
            {
                main: "학업운이 안정적인 상태로 꾸준하고 지속적인 노력이 가장 중요한 시기입니다. 단기간에 큰 성과를 기대하기보다는 장기적인 관점에서 차분히 접근하시기 바랍니다. 기초가 부족하다고 느끼시는 분야가 있다면 이번 기회에 확실히 다져놓으시기 바랍니다. 탄탄한 기본기가 있어야 나중에 더 어려운 내용도 쉽게 이해할 수 있기 때문입니다. 자신만의 학습 방법과 스타일을 찾아 체계적인 학습 계획을 세우고 꾸준히 실천하는 것이 성공의 열쇠입니다. 시험 결과에 일희일비하지 말고, 부족한 부분을 차근차근 보완해 나가는 성숙한 자세가 필요합니다.",
                advice: ["기초 학습에 충분한 시간을 투자하세요", "규칙적인 학습 패턴을 유지하고 건강관리도 소홀히 하지 마세요"],
                lucky: {
                    color: "집중의 초록색",
                    number: "333",
                    item: "조용한 학습을 위한 이어플러그나 백색소음기"
                }
            }
        ]
    },
    love: {
        title: "애정운",
        fortunes: [
            {
                main: "애정운이 매우 밝고 희망찬 상태입니다. 기존의 연인과는 더욱 깊고 진실한 사랑을 확인하게 될 것이며, 솔로인 분들은 운명적인 만남을 할 가능성이 높습니다. 특히 계절이 바뀌는 시기에 사랑과 관련된 특별한 일이 생길 것으로 보입니다. 자신의 내면적 매력을 자연스럽게 표현하되, 성급하게 서두르지는 마세요. 기혼자분들은 배우자와의 관계가 한층 더 돈독해지며 가정에 기쁜 소식이 있을 수도 있습니다.",
                advice: ["진실한 마음으로 소통하세요", "외모보다 내면의 아름다움을 중시하세요"],
                lucky: {
                    color: "분홍색",
                    number: "6",
                    item: "향기로운 향수나 바디미스트"
                }
            },
            {
                main: "애정 면에서 안정적이고 성숙한 시기입니다. 극적인 변화보다는 차근차근 관계를 발전시켜 나가는 것이 가장 좋은 선택입니다. 이미 연인이 있는 분들은 서로에 대한 신뢰와 이해가 더욱 깊어지고, 미래에 대한 구체적인 계획을 함께 세울 수도 있습니다. 솔로인 분들은 주변의 소개나 취미 모임을 통해 마음이 맞는 좋은 인연을 만날 수 있을 것입니다. 기혼자분들은 부부간의 소중한 대화시간을 늘려보세요.",
                advice: ["적극적인 자세로 기회를 만드세요", "함께하는 취미활동을 시작해보세요"],
                lucky: {
                    color: "라벤더색",
                    number: "4",
                    item: "커플링이나 예쁜 반지"
                }
            }
        ]
    },
    compatibility: {
        title: "궁합",
        analyses: [
            {
                compatibility_types: [
                    "성격이 서로를 보완하는 이상적인 조합",
                    "가치관과 인생관이 잘 맞는 안정적인 관계", 
                    "열정적이지만 균형잡힌 역동적인 궁합",
                    "차분하고 신중한 서로를 이해하는 관계"
                ],
                cautions: [
                    "가끔 고집을 부리지 말고 서로 양보하는 마음이 필요합니다",
                    "소통이 부족할 때가 있으니 대화시간을 늘려보세요",
                    "서로 다른 관점을 존중하고 이해하려 노력하세요",
                    "작은 갈등도 쌓이지 않도록 즉시 해결하는 것이 중요합니다"
                ],
                positive_effects: [
                    "서로의 장점을 극대화시켜주는 관계입니다",
                    "함께 있으면 더 나은 사람이 되도록 격려해줍니다",
                    "서로의 꿈을 응원하고 지지해주는 든든한 동반자입니다",
                    "어려운 시기에 힘이 되어주는 소중한 인연입니다"
                ],
                conclusions: [
                    { score: 95, text: "천생연분! 매우 좋은 궁합" },
                    { score: 88, text: "운명적인 만남, 훌륭한 궁합" },
                    { score: 82, text: "서로를 성장시키는 좋은 궁합" },
                    { score: 75, text: "안정적이고 조화로운 궁합" },
                    { score: 68, text: "노력하면 발전할 수 있는 궁합" },
                    { score: 58, text: "서로 다름을 인정하며 배려가 필요한 궁합" },
                    { score: 45, text: "이해와 소통이 중요한 궁합" }
                ]
            }
        ]
    },
    "zodiac-sign": {
        title: "띠별 운세",
        zodiacSigns: {
            0: '원숭이띠',
            1: '닭띠',
            2: '개띠',
            3: '돼지띠',
            4: '쥐띠',
            5: '소띠',
            6: '호랑이띠',
            7: '토끼띠',
            8: '용띠',
            9: '뱀띠',
            10: '말띠',
            11: '양띠'
        },
        zodiacIcons: {
            '원숭이띠': '🐵',
            '닭띠': '🐓',
            '개띠': '🐕',
            '돼지띠': '🐷',
            '쥐띠': '🐭',
            '소띠': '🐄',
            '호랑이띠': '🐅',
            '토끼띠': '🐰',
            '용띠': '🐉',
            '뱀띠': '🐍',
            '말띠': '🐴',
            '양띠': '🐑'
        },
        fortunes: {
            '원숭이띠': [
                {
                    main: "🐵 원숭이띠의 오늘은 기발한 아이디어와 창의적인 사고가 빛을 발하는 날입니다. 평소보다 재치있고 유머러스한 모습으로 많은 사람들의 마음을 사로잡게 될 것입니다. 새로운 기술이나 트렌드에 대한 관심이 높아지며, 이를 통해 예상치 못한 기회를 발견할 수 있을 것입니다. 소통 능력이 뛰어난 원숭이띠 특성상 오늘은 특히 네트워킹이나 새로운 인맥 형성에 유리한 하루가 될 것입니다.",
                    advice: ["창의적인 아이디어를 적극적으로 표현해보세요", "새로운 기술이나 도구에 관심을 가져보세요"],
                    lucky: {
                        color: "활기찬 노란색",
                        number: "3",
                        item: "스마트한 디지털 기기"
                    }
                },
                {
                    main: "🐵 영리하고 순발력이 뛰어난 원숭이띠는 오늘 복잡한 문제를 간단하게 해결할 수 있는 능력을 발휘하게 됩니다. 다른 사람들이 어려워하는 일도 당신에게는 쉽게 느껴질 것이며, 이로 인해 주변에서 인정받는 하루가 될 것입니다. 호기심이 많은 성격상 새로운 분야에 대한 학습 욕구가 강해지며, 이것이 향후 큰 도움이 될 것입니다.",
                    advice: ["호기심을 바탕으로 새로운 것을 배워보세요", "문제 해결 능력을 적극 활용하세요"],
                    lucky: {
                        color: "밝은 주황색",
                        number: "9",
                        item: "퍼즐이나 두뇌 게임"
                    }
                }
            ],
            '닭띠': [
                {
                    main: "🐓 닭띠의 오늘은 성실함과 부지런함이 빛나는 하루입니다. 일찍 일어나서 계획적으로 하루를 보내면 예상보다 많은 일들을 해낼 수 있을 것입니다. 정확성과 꼼꼼함을 중시하는 닭띠의 특성이 업무나 학업에서 큰 장점으로 작용할 것입니다. 또한 패션 센스나 미적 감각이 뛰어난 하루로, 외모나 스타일링에 신경 쓰면 좋은 반응을 얻을 수 있을 것입니다.",
                    advice: ["일찍 기상하여 계획적으로 하루를 시작하세요", "세심한 주의력을 발휘해 완벽을 추구하세요"],
                    lucky: {
                        color: "우아한 금색",
                        number: "5",
                        item: "깃털 모티브 액세서리"
                    }
                },
                {
                    main: "🐓 자존심이 강하고 품격 있는 닭띠는 오늘 리더십을 발휘할 기회가 찾아올 것입니다. 정의감이 강한 성격으로 인해 불의한 일에 맞서게 될 수도 있지만, 이것이 결과적으로는 좋은 평가로 이어질 것입니다. 표현력이 뛰어나 발표나 연설, 중요한 대화에서 인상적인 모습을 보여줄 수 있는 날입니다.",    
                    advice: ["정의감을 바탕으로 올바른 선택을 하세요", "리더십을 발휘할 기회를 놓치지 마세요"],
                    lucky: {
                        color: "당당한 빨간색",
                        number: "7",
                        item: "격식 있는 시계나 펜"
                    }
                }
            ],
            '개띠': [
                {
                    main: "🐕 개띠의 오늘은 충성심과 신뢰성이 주변 사람들에게 큰 감동을 주는 날입니다. 어려운 상황에 있는 친구나 동료를 도와주게 되며, 이로 인해 더욱 돈독한 관계를 맺게 될 것입니다. 정직하고 솔직한 성격이 오해를 풀고 갈등을 해결하는 데 큰 역할을 할 것입니다. 가족이나 가까운 사람들과의 시간이 특히 의미 있는 하루가 될 것입니다.",
                    advice: ["진실한 마음으로 사람들과 소통하세요", "어려운 이웃을 도와주는 선행을 실천해보세요"],
                    lucky: {
                        color: "따뜻한 갈색",
                        number: "2",
                        item: "가족사진이나 우정의 선물"
                    }
                },
                {
                    main: "🐕 책임감이 강하고 의리있는 개띠는 오늘 맡은 일에 대한 강한 책임감을 보여주게 됩니다. 다른 사람들이 포기하고 싶어하는 일도 끝까지 해내는 끈기를 발휘할 것입니다. 정의감이 투철해 불합리한 일에 목소리를 낼 수도 있지만, 이것이 긍정적인 변화를 이끌어낼 것입니다.",
                    advice: ["끝까지 포기하지 않는 끈기를 발휘하세요", "정의로운 일에 앞장서는 용기를 보여주세요"],
                    lucky: {
                        color: "믿음직한 파란색",
                        number: "8",
                        item: "충성을 상징하는 반지나 목걸이"
                    }
                }
            ],
            '돼지띠': [
                {
                    main: "🐷 돼지띠의 오늘은 관대하고 너그러운 마음으로 많은 사람들에게 위로와 힘을 주는 날입니다. 풍요롭고 여유로운 에너지가 주변에 긍정적인 영향을 미치며, 특히 금전적인 면에서 좋은 소식이 들려올 수 있습니다. 맛있는 음식을 함께 나누거나 소중한 사람들과 즐거운 시간을 보내는 것이 행운을 가져다줄 것입니다.",
                    advice: ["관대한 마음으로 다른 사람들을 대해주세요", "맛있는 음식을 나누며 인간관계를 돈독히 하세요"],
                    lucky: {
                        color: "풍요로운 분홍색",
                        number: "6",
                        item: "풍요를 상징하는 작은 보석이나 장신구"
                    }
                },
                {
                    main: "🐷 성실하고 근면한 돼지띠는 오늘 꾸준히 노력해온 일들이 결실을 맺기 시작하는 것을 느끼게 될 것입니다. 물질적인 풍요뿐만 아니라 정신적인 만족도 함께 찾아오는 균형잡힌 하루가 될 것입니다. 베푸는 마음이 강해 다른 사람들을 도우면서 더 큰 행복을 느끼게 될 것입니다.",
                    advice: ["꾸준한 노력의 결실을 믿고 계속 전진하세요", "베푸는 마음을 통해 더 큰 행복을 찾으세요"],
                    lucky: {
                        color: "안정적인 초록색",
                        number: "12",
                        item: "곡식이나 열매 모양의 장식품"
                    }
                }
            ],
            '쥐띠': [
                {
                    main: "🐭 쥐띠의 오늘은 기민함과 적응력이 빛나는 하루입니다. 변화하는 상황에 재빠르게 대응하며, 다른 사람들이 놓치는 기회를 포착할 수 있는 날입니다. 섬세하고 꼼꼼한 성격이 작은 디테일에서 큰 차이를 만들어낼 것입니다. 저축이나 투자에 관심을 갖기 좋은 날이며, 작은 것부터 차근차근 모아나가는 지혜가 필요한 시기입니다.",
                    advice: ["작은 기회도 놓치지 말고 적극적으로 활용하세요", "꼼꼼한 계획으로 미래를 준비하세요"],
                    lucky: {
                        color: "영리한 회색",
                        number: "1",
                        item: "작고 정교한 시계나 계산기"
                    }
                },
                {
                    main: "🐭 근면하고 절약정신이 강한 쥐띠는 오늘 경제적인 감각이 특히 뛰어난 하루를 보내게 됩니다. 불필요한 지출을 줄이고 알뜰하게 생활하는 지혜가 장기적으로 큰 도움이 될 것입니다. 정보 수집 능력이 뛰어나 유용한 정보를 얻어 주변 사람들과 공유하게 될 것입니다.",
                    advice: ["절약하는 습관을 통해 미래를 대비하세요", "유용한 정보를 적극적으로 활용하고 공유하세요"],
                    lucky: {
                        color: "신중한 검은색",
                        number: "4",
                        item: "실용적인 가계부나 플래너"
                    }
                }
            ],
            '소띠': [
                {
                    main: "🐄 소띠의 오늘은 성실함과 끈기가 큰 성과로 이어지는 보람찬 하루입니다. 묵묵히 자신의 길을 걸어온 노력이 인정받는 시기이며, 안정적이고 신뢰할 수 있는 모습으로 주변의 존경을 받게 될 것입니다. 느리지만 확실한 발걸음으로 목표를 향해 나아가는 것이 가장 현명한 선택이 될 것입니다. 농업이나 부동산 관련 일에 특히 좋은 기운이 함께합니다.",
                    advice: ["서두르지 말고 꾸준히 자신의 길을 걸어가세요", "신뢰성을 바탕으로 안정적인 관계를 구축하세요"],
                    lucky: {
                        color: "대지의 갈색",
                        number: "10",
                        item: "자연소재로 만든 소품"
                    }
                },
                {
                    main: "🐄 인내심이 강하고 책임감이 뛰어난 소띠는 오늘 어려운 과제나 도전에 굴복하지 않는 강인함을 보여주게 됩니다. 다른 사람들이 쉽게 포기하는 일도 끝까지 해내는 의지력이 주변에 감동을 줄 것입니다. 전통적인 가치와 기본기를 중시하는 자세가 좋은 결과를 가져다줄 것입니다.",
                    advice: ["기본에 충실하며 전통적인 가치를 소중히 여기세요", "어려움 앞에서도 굴복하지 않는 의지를 보여주세요"],
                    lucky: {
                        color: "견고한 베이지색",
                        number: "11",
                        item: "튼튼하고 실용적인 물건"
                    }
                }
            ],
            '호랑이띠': [
                {
                    main: "🐅 호랑이띠의 오늘은 용기와 패기가 넘치는 역동적인 하루입니다. 새로운 도전에 과감하게 뛰어들 수 있는 기회가 찾아오며, 리더십을 발휘할 상황에 직면하게 될 것입니다. 강인한 정신력과 추진력으로 어떤 장애물도 극복할 수 있을 것입니다. 정의감이 강해 약자를 돕거나 불의에 맞서는 일에서 큰 보람을 느끼게 될 것입니다.",
                    advice: ["용기를 내어 새로운 도전에 나서보세요", "리더십을 발휘할 기회를 적극 활용하세요"],
                    lucky: {
                        color: "역동적인 주황색",
                        number: "3",
                        item: "호랑이 무늬나 스트라이프 패턴의 소품"
                    }
                },
                {
                    main: "🐅 당당하고 자신감 넘치는 호랑이띠는 오늘 카리스마가 빛나는 하루를 보내게 됩니다. 강렬한 존재감으로 많은 사람들의 관심을 받게 되며, 중요한 결정을 내리는 위치에 서게 될 수도 있습니다. 직감이 뛰어난 날이므로 논리보다는 본능을 따라 행동하는 것이 좋은 결과를 가져올 것입니다.",
                    advice: ["강한 자신감을 바탕으로 당당하게 행동하세요", "직감을 믿고 중요한 결정을 내려보세요"],
                    lucky: {
                        color: "강렬한 빨간색",
                        number: "7",
                        item: "카리스마를 상징하는 붉은색 액세서리"
                    }
                }
            ],
            '토끼띠': [
                {
                    main: "🐰 토끼띠의 오늘은 온화하고 평화로운 에너지가 주변에 안정감을 주는 날입니다. 섬세한 감수성과 배려심으로 많은 사람들에게 위로가 되며, 특히 예술적인 감각이 뛰어난 하루가 될 것입니다. 갈등 상황에서는 중재자 역할을 하게 될 수도 있으며, 지혜로운 조언으로 문제 해결에 도움을 줄 것입니다. 미적 감각이 뛰어나 창작 활동이나 디자인 관련 일에 좋은 영감을 받을 수 있습니다.",
                    advice: ["섬세한 감성을 살려 예술적 활동에 도전해보세요", "중재자 역할을 통해 평화를 만들어가세요"],
                    lucky: {
                        color: "부드러운 하늘색",
                        number: "6",
                        item: "달빛처럼 은은한 장신구"
                    }
                },
                {
                    main: "🐰 신중하고 조심스러운 토끼띠는 오늘 안전을 우선시하는 현명한 선택을 하게 됩니다. 무리하지 않고 차분히 상황을 판단하는 능력이 위험을 피하고 좋은 기회를 선별하는 데 도움이 될 것입니다. 가정적이고 평화를 사랑하는 성격으로 인해 가족이나 친구들과의 관계가 더욱 돈독해질 것입니다.",
                    advice: ["신중한 판단으로 안전한 선택을 하세요", "가족과의 시간을 소중히 여기며 평화로운 하루를 보내세요"],
                    lucky: {
                        color: "평화로운 연두색",
                        number: "9",
                        item: "집안을 아늑하게 만드는 소품"
                    }
                }
            ],
            '용띠': [
                {
                    main: "🐉 용띠의 오늘은 웅장하고 역동적인 에너지가 모든 일을 성공으로 이끄는 특별한 날입니다. 천운이 함께하여 불가능해 보이던 일도 기적처럼 해결될 수 있으며, 리더십과 카리스마가 최고조에 달해 많은 사람들의 존경과 신뢰를 받게 될 것입니다. 새로운 기회가 연이어 찾아오며, 과감한 도전이 큰 성과로 이어질 것입니다. 창조적이고 혁신적인 아이디어가 현실화될 가능성이 높은 날입니다.",
                    advice: ["자신감을 갖고 큰 그림을 그려보세요", "혁신적인 아이디어를 적극적으로 실현해보세요"],
                    lucky: {
                        color: "황제의 금색",
                        number: "9",
                        item: "용을 상징하는 고급스러운 장신구"
                    }
                },
                {
                    main: "🐉 고귀하고 위엄있는 용띠는 오늘 타고난 리더십으로 중요한 프로젝트나 일을 성공적으로 이끌어가게 됩니다. 완벽주의적 성향이 높은 품질의 결과물을 만들어내며, 주변 사람들에게 영감을 주는 존재가 될 것입니다. 운명적인 만남이나 인생을 바꿀 수 있는 큰 기회가 찾아올 수도 있습니다.",
                    advice: ["완벽을 추구하는 자세로 최고의 결과를 만들어내세요", "운명적인 기회를 놓치지 말고 적극 활용하세요"],
                    lucky: {
                        color: "신비로운 보라색",
                        number: "5",
                        item: "권위를 상징하는 인장이나 도장"
                    }
                }
            ],
            '뱀띠': [
                {
                    main: "🐍 뱀띠의 오늘은 지혜와 직감력이 빛나는 신비로운 하루입니다. 복잡한 상황의 본질을 꿰뚫어보는 통찰력으로 다른 사람들이 놓치는 중요한 사실을 발견하게 될 것입니다. 신중하고 계획적인 접근 방식이 큰 성과를 가져다줄 것이며, 특히 장기적인 투자나 계획에 대한 감각이 뛰어난 날입니다. 미스터리한 매력으로 새로운 인연을 만들 수도 있습니다.",
                    advice: ["직감을 믿고 신중한 판단을 내리세요", "장기적인 관점으로 계획을 세우고 실행하세요"],
                    lucky: {
                        color: "신비로운 짙은 녹색",
                        number: "8",
                        item: "뱀 무늬나 곡선이 아름다운 장신구"
                    }
                },
                {
                    main: "🐍 신중하고 치밀한 뱀띠는 오늘 완벽한 타이밍을 잡아 중요한 일을 처리하게 됩니다. 기다림의 미학을 아는 성격상 성급하게 서두르지 않고 최적의 순간을 포착하는 능력이 빛을 발할 것입니다. 깊이 있는 사고력으로 문제의 핵심을 파악하고 효과적인 해결책을 제시할 수 있을 것입니다.",
                    advice: ["완벽한 타이밍를 기다리며 신중하게 행동하세요", "깊이 있는 사고로 문제의 본질을 파악하세요"],
                    lucky: {
                        color: "우아한 검은색", 
                        number: "2",
                        item: "클래식하고 세련된 악세서리"
                    }
                }
            ],
            '말띠': [
                {
                    main: "🐴 말띠의 오늘은 자유롭고 역동적인 에너지가 넘치는 활기찬 하루입니다. 빠른 추진력과 행동력으로 많은 일들을 척척 해내며, 특히 여행이나 이동과 관련된 일에서 좋은 기회를 만날 수 있을 것입니다. 솔직하고 직선적인 성격이 사람들에게 신뢰감을 주며, 새로운 환경이나 사람들과의 만남에서 큰 즐거움을 느끼게 될 것입니다. 운동이나 야외 활동이 특히 좋은 결과를 가져다줄 것입니다.",
                    advice: ["활동적인 하루를 보내며 에너지를 발산하세요", "새로운 환경이나 사람들과의 만남을 즐기세요"],
                    lucky: {
                        color: "자유로운 하늘색",
                        number: "4",
                        item: "스포츠 용품이나 여행 관련 소품"
                    }
                },
                {
                    main: "🐴 열정적이고 모험을 좋아하는 말띠는 오늘 새로운 도전에 대한 강한 욕구를 느끼게 될 것입니다. 변화를 두려워하지 않는 성격으로 인해 기존의 틀을 벗어난 창의적인 시도를 하게 될 것입니다. 빠른 판단력과 실행력으로 기회를 놓치지 않고 적극적으로 활용할 수 있는 날입니다.",
                    advice: ["변화를 두려워하지 말고 새로운 도전을 시작하세요", "빠른 실행력으로 기회를 적극 활용하세요"],
                    lucky: {
                        color: "열정적인 빨간색",
                        number: "11",
                        item: "역동적인 디자인의 시계나 벨트"
                    }
                }
            ],
            '양띠': [
                {
                    main: "🐑 양띠의 오늘은 온순하고 따뜻한 마음으로 많은 사람들에게 위안을 주는 날입니다. 배려심이 깊고 이해심이 많아 갈등 상황에서는 평화를 가져다주는 역할을 하게 될 것입니다. 예술적 감성이 뛰어나 창작 활동이나 핸드메이드 작업에서 좋은 영감을 받을 수 있으며, 자연과 함께하는 시간이 특히 의미있을 것입니다. 가족이나 가까운 사람들과의 정서적 유대감이 더욱 깊어지는 하루가 될 것입니다.",
                    advice: ["부드러운 마음으로 다른 사람들을 포용하세요", "자연과 함께하는 시간을 통해 마음의 평화를 찾으세요"],
                    lucky: {
                        color: "순수한 흰색",
                        number: "6",
                        item: "양모나 자연 소재로 만든 따뜻한 소품"
                    }
                },
                {
                    main: "🐑 평화롭고 조화를 중시하는 양띠는 오늘 주변 사람들과의 관계에서 중요한 역할을 하게 됩니다. 공감 능력이 뛰어나 다른 사람의 마음을 잘 이해하고 위로해주는 능력이 빛을 발할 것입니다. 겸손하고 소박한 성격이 오히려 큰 매력으로 작용하여 진정한 친구들을 만나게 될 것입니다.",
                    advice: ["겸손한 자세로 진정한 관계를 만들어가세요", "다른 사람의 마음을 이해하고 공감하는 능력을 발휘하세요"],
                    lucky: {
                        color: "온화한 크림색",
                        number: "12",
                        item: "마음을 따뜻하게 해주는 차나 음료"
                    }
                }
            ]
        }
    },
    "past-life": {
        title: "전생 운세",
        fortunes: [
            {
                main: "당신의 전생은 지혜롭고 박학한 학자였던 것으로 보입니다. 많은 책을 읽고 깊이 있는 사색을 즐겼던 분으로, 그때의 지식에 대한 갈망과 진리를 추구하는 성향이 현재의 당신에게도 그대로 이어져 오고 있습니다. 전생에서 완성하지 못했던 어떤 연구나 학문적 과제가 있었던 것 같으며, 이생에서는 그것을 다른 형태로 완성해 나가고 계신 것 같습니다. 당신이 책을 좋아하거나 깊이 생각하기를 즐기는 것, 그리고 진실을 중요시하는 성격은 모두 전생의 영향인 것으로 보입니다. 전생의 지혜가 현생의 직감으로 나타나고 있으니 자신의 직감을 믿고 따르시기 바랍니다.",
                advice: ["책이나 학습에 더 많은 시간을 투자해보세요", "직감을 믿고 중요한 결정을 내리세요"],
                lucky: {
                    color: "지혜를 상징하는 남색",
                    number: "7",
                    item: "오래된 책이나 문구용품"
                }
            },
            {
                main: "당신의 전생은 자연을 사랑하고 동식물과 교감할 수 있는 특별한 능력을 가진 분이었습니다. 아마도 산속에서 약초를 캐고 동물들을 치료하는 일을 하셨거나, 자연의 순리를 깊이 이해하는 현자였을 것입니다. 그런 전생의 영향으로 현재의 당신도 자연 속에 있을 때 마음이 편안해지고, 식물이나 동물에 대한 특별한 애정을 갖고 계실 것입니다. 또한 다른 사람들의 마음을 잘 읽고 치유해주는 능력도 그때부터 이어져 온 것 같습니다. 전생에서 자연과 함께 살면서 얻은 평온함과 치유의 에너지가 현생에서도 당신의 큰 장점이 되고 있습니다. 스트레스를 받을 때는 자연 속으로 나가보시기 바랍니다.",
                advice: ["자연과 함께하는 시간을 늘려보세요", "다른 사람들을 도와주는 일에 관심을 가져보세요"],
                lucky: {
                    color: "자연의 초록색",
                    number: "4",
                    item: "작은 화분이나 자연석 장식품"
                }
            }
        ]
    },
    "wish-fortune": {
        title: "소원 성취 운세",
        fortunes: [
            {
                main: "당신의 소원은 우주의 에너지와 완벽하게 조화를 이루고 있어 실현 가능성이 매우 높습니다. 특히 최근 들어 그 소원에 대한 당신의 간절함과 노력이 하늘에 닿았으며, 곧 구체적인 결과로 나타나기 시작할 것입니다. 다만 소원이 이루어지는 과정에서는 당신이 예상했던 것과는 다른 형태로 나타날 수 있으니, 열린 마음으로 받아들이시기 바랍니다. 소원 성취를 위해서는 현재의 긍정적인 마음가짐을 유지하는 것이 가장 중요하며, 다른 사람들에게도 좋은 에너지를 나누어주시면 더욱 빠른 시일 내에 소원이 성취될 것입니다. 보름달이 뜨는 날에 특별한 변화가 있을 것으로 보입니다.",
                advice: ["긍정적인 마음가짐을 계속 유지하세요", "다른 사람들에게 친절을 베풀어주세요"],
                lucky: {
                    color: "소원을 담은 황금색",
                    number: "3",
                    item: "별 모양의 작은 장식품이나 소원지"
                }
            },
            {
                main: "당신의 소원은 현재 천천히 실현되어 가고 있는 중입니다. 비록 눈에 보이는 변화는 아직 크지 않을 수 있지만, 보이지 않는 곳에서 많은 일들이 당신의 소원을 위해 움직이고 있습니다. 소원이 이루어지기 위해서는 인내심과 꾸준한 노력이 필요한 시기이며, 포기하지 않고 계속 나아간다면 반드시 원하는 결과를 얻을 수 있을 것입니다. 특히 주변 사람들의 도움이 중요한 역할을 할 것이니, 혼자 해결하려 하지 말고 믿을 만한 사람들에게 조언을 구해보시기 바랍니다. 소원을 이루기 위한 구체적인 계획을 세우고 단계별로 실행해 나가는 것이 성공의 열쇠가 될 것입니다.",
                advice: ["구체적인 실행 계획을 세워보세요", "주변 사람들의 도움을 받아들이세요"],
                lucky: {
                    color: "희망의 하늘색",
                    number: "9",
                    item: "목표를 적은 작은 노트"
                }
            }
        ]
    },
    constellation: {
        title: "별자리 운세",
        fortunes: [
            {
                main: "오늘은 당신의 별자리에 매우 좋은 행성들의 배치가 이루어져 있어 전체적으로 밝고 희망찬 하루가 될 것입니다. 특히 사랑과 관계를 담당하는 금성의 영향으로 인간관계에서 특별한 행운이 찾아올 것이며, 새로운 만남이나 기존 관계의 발전이 기대됩니다. 창의성을 담당하는 별들도 좋은 위치에 있어 예술적 영감이나 창의적인 아이디어가 샘솟을 것입니다. 수성의 좋은 영향으로 의사소통 능력도 평소보다 뛰어나게 발휘될 것이니, 중요한 대화나 발표가 있다면 자신감을 갖고 임하시기 바랍니다. 목성의 축복으로 행운과 기회도 함께 따를 것입니다.",
                advice: ["창의적인 활동에 시간을 투자해보세요", "중요한 대화는 오늘 하시는 것이 좋습니다"],
                lucky: {
                    color: "별빛처럼 반짝이는 은색",
                    number: "12",
                    item: "별자리 모양의 액세서리"
                }
            },
            {
                main: "오늘은 당신의 별자리가 다소 주의 깊게 행동해야 하는 하루입니다. 화성의 영향으로 평소보다 감정적이 되기 쉬우니, 중요한 결정은 하루 정도 미루는 것이 좋겠습니다. 다만 이런 에너지를 건설적인 방향으로 활용한다면 평소 미루고 있던 일들을 해결하거나 운동 등의 활발한 활동에 투입하기에는 좋은 날입니다. 토성의 영향으로 책임감이 강해지는 날이기도 하니, 자신의 의무나 약속을 점검해보는 시간을 갖는 것도 의미가 있을 것입니다. 달의 위상이 당신에게 직감력을 높여주고 있으니, 논리보다는 느낌을 따라 행동하시는 것이 더 좋은 결과를 가져다줄 것입니다.",
                advice: ["감정적인 결정은 피하고 하루 후에 다시 생각해보세요", "운동이나 활발한 활동으로 에너지를 발산하세요"],
                lucky: {
                    color: "차분한 진주색",
                    number: "6",
                    item: "달 모양의 작은 부적"
                }
            }
        ]
    }
};

// 현재 상태 관리
let currentUser = null;
let currentPartner = null;
let currentPage = 'intro';

// 설날(음력 신정) 날짜 매핑 데이터 (1900-2030)
const seollalMap = {
    1900: '1900-01-31', 1901: '1901-02-19', 1902: '1902-02-08', 1903: '1903-01-29', 1904: '1904-02-16',
    1905: '1905-02-04', 1906: '1906-01-25', 1907: '1907-02-13', 1908: '1908-02-02', 1909: '1909-01-22',
    1910: '1910-02-10', 1911: '1911-01-30', 1912: '1912-02-18', 1913: '1913-02-06', 1914: '1914-01-26',
    1915: '1915-02-14', 1916: '1916-02-03', 1917: '1917-01-23', 1918: '1918-02-11', 1919: '1919-02-01',
    1920: '1920-02-20', 1921: '1921-02-08', 1922: '1922-01-28', 1923: '1923-02-16', 1924: '1924-02-05',
    1925: '1925-01-25', 1926: '1926-02-13', 1927: '1927-02-02', 1928: '1928-01-23', 1929: '1929-02-10',
    1930: '1930-01-30', 1931: '1931-02-17', 1932: '1932-02-06', 1933: '1933-01-26', 1934: '1934-02-14',
    1935: '1935-02-04', 1936: '1936-01-24', 1937: '1937-02-11', 1938: '1938-01-31', 1939: '1939-02-19',
    1940: '1940-02-08', 1941: '1941-01-27', 1942: '1942-02-15', 1943: '1943-02-05', 1944: '1944-01-25',
    1945: '1945-02-13', 1946: '1946-02-02', 1947: '1947-01-22', 1948: '1948-02-10', 1949: '1949-01-29',
    1950: '1950-02-17', 1951: '1951-02-06', 1952: '1952-01-27', 1953: '1953-02-14', 1954: '1954-02-03',
    1955: '1955-01-24', 1956: '1956-02-12', 1957: '1957-01-31', 1958: '1958-02-18', 1959: '1959-02-08',
    1960: '1960-01-28', 1961: '1961-02-15', 1962: '1962-02-05', 1963: '1963-01-25', 1964: '1964-02-13',
    1965: '1965-02-02', 1966: '1966-01-21', 1967: '1967-02-09', 1968: '1968-01-30', 1969: '1969-02-17',
    1970: '1970-02-06', 1971: '1971-01-27', 1972: '1972-02-15', 1973: '1973-02-03', 1974: '1974-01-23',
    1975: '1975-02-11', 1976: '1976-01-31', 1977: '1977-02-18', 1978: '1978-02-07', 1979: '1979-01-28',
    1980: '1980-02-16', 1981: '1981-02-05', 1982: '1982-01-25', 1983: '1983-02-13', 1984: '1984-02-02',
    1985: '1985-02-20', 1986: '1986-02-09', 1987: '1987-01-29', 1988: '1988-02-17', 1989: '1989-02-06',
    1990: '1990-01-27', 1991: '1991-02-15', 1992: '1992-02-04', 1993: '1993-01-23', 1994: '1994-02-10',
    1995: '1995-01-31', 1996: '1996-02-19', 1997: '1997-02-07', 1998: '1998-01-28', 1999: '1999-02-16',
    2000: '2000-02-05', 2001: '2001-01-24', 2002: '2002-02-12', 2003: '2003-02-01', 2004: '2004-01-22',
    2005: '2005-02-09', 2006: '2006-01-29', 2007: '2007-02-17', 2008: '2008-02-07', 2009: '2009-01-26',
    2010: '2010-02-14', 2011: '2011-02-03', 2012: '2012-01-23', 2013: '2013-02-10', 2014: '2014-01-31',
    2015: '2015-02-19', 2016: '2016-02-08', 2017: '2017-01-28', 2018: '2018-02-16', 2019: '2019-02-05',
    2020: '2020-01-25', 2021: '2021-02-12', 2022: '2022-02-01', 2023: '2023-01-22', 2024: '2024-02-10',
    2025: '2025-01-29', 2026: '2026-02-17', 2027: '2027-02-06', 2028: '2028-01-26', 2029: '2029-02-13',
    2030: '2030-02-03'
};

// 정확한 띠 계산 함수 (설날 기준)
function calculateZodiacSign(birthDate, calendarType = 'solar') {
    const date = new Date(birthDate);
    let year = date.getFullYear();
    const month = date.getMonth() + 1; // getMonth()는 0부터 시작
    const day = date.getDate();
    
    // 양력인 경우, 설날 이전이면 전년도 띠 적용
    if (calendarType === 'solar') {
        const seollalDate = seollalMap[year];
        if (seollalDate) {
            const birthday = new Date(year, month - 1, day); // month는 0부터 시작
            const seollal = new Date(seollalDate);
            
            if (birthday < seollal) {
                year -= 1;
            }
        }
    }
    // 음력인 경우는 해당 연도 그대로 사용
    
    const zodiacIndex = year % 12;
    return fortuneData["zodiac-sign"].zodiacSigns[zodiacIndex];
}

// 사용자 정보에서 띠 계산하는 헬퍼 함수
function getUserZodiac(user) {
    // 기존 저장된 데이터에 calendarType이 없는 경우 'solar' 기본값 사용
    const calendarType = user.calendarType || 'solar';
    return calculateZodiacSign(user.birthDate, calendarType);
}

// GPT 스타일 동적 운세 생성 함수
async function generateFortune(category, birthYear, birthHour, zodiac, gender, userData = null) {
    // 먼저 API 호출 시도
    try {
        const apiResult = await fetchFortuneFromAPI(category, userData);
        if (apiResult) {
            return apiResult;
        }
    } catch (error) {
        console.log('API 호출 실패, 로컬 시뮬레이션으로 대체:', error);
    }
    
    // API 호출 실패시 기존 시뮬레이션 사용
    const sampleFortunes = {
        today: [
            "오늘은 집중력과 직감이 빛나는 날입니다. 중요한 결정을 내리기에 좋은 시기이니 망설이지 마세요.",
            "작은 선택이 큰 결과로 이어질 수 있습니다. 신중함과 용기의 균형을 잘 맞춰보세요.",
            "감정 조절이 중요한 하루가 될 것입니다. 차분한 마음으로 상황을 바라보시기 바랍니다.",
            "새로운 기회가 문을 두드릴 것입니다. 열린 마음으로 받아들이면 좋은 변화가 있을 것입니다.",
            "인간관계에서 따뜻한 소식이 전해질 것입니다. 진심 어린 관심이 더 큰 행복을 불러올 것입니다.",
            "창의적인 아이디어가 샘솟는 하루입니다. 평소와 다른 접근법을 시도해보시기 바랍니다."
        ],
        tomorrow: [
            "내일은 안정과 평화가 함께하는 날이 될 것입니다. 마음의 여유를 갖고 하루를 보내세요.",
            "예상치 못한 기쁜 소식이 들려올 수 있습니다. 긍정적인 마음가짐을 유지하시기 바랍니다.",
            "건강관리에 특별한 관심을 기울이기 좋은 날입니다. 자신을 돌아보는 시간을 가져보세요.",
            "가족이나 친구들과의 만남에서 의미 있는 대화를 나눌 수 있을 것입니다.",
            "계획했던 일들이 순조롭게 진행될 것입니다. 꾸준함이 성공의 열쇠가 될 것입니다."
        ],
        month: [
            "이번 달은 성장과 발전의 시기입니다. 새로운 도전을 두려워하지 마시고 적극적으로 나아가세요.",
            "인간관계에서 깊이 있는 변화가 있을 것입니다. 진정한 우정과 사랑을 발견할 수 있을 것입니다.",
            "경제적 안정을 위한 계획을 세우기 좋은 달입니다. 장기적인 관점에서 접근해보세요.",
            "창작이나 예술 활동에 좋은 영감을 받을 수 있는 시기입니다. 자신만의 색깔을 표현해보세요.",
            "건강한 생활 습관을 만들기 시작하기 좋은 때입니다. 작은 변화부터 시작해보시기 바랍니다."
        ],
        year: [
            "올해는 큰 변화와 성취가 기다리는 특별한 해입니다. 자신을 믿고 담대하게 전진하세요.",
            "지금까지의 노력이 결실을 맺는 의미 있는 한 해가 될 것입니다. 감사하는 마음을 잊지 마세요.",
            "새로운 인연과 기회가 연이어 찾아올 것입니다. 열린 마음으로 받아들이시기 바랍니다.",
            "자기계발과 학습에 투자하기 좋은 해입니다. 꾸준한 노력이 미래의 자산이 될 것입니다.",
            "가정과 일의 균형을 찾는 것이 중요한 해입니다. 소중한 사람들과의 시간을 소홀히 하지 마세요."
        ],
        love: [
            "마음의 문을 열면 새로운 인연이 찾아올 수 있어요. 자신을 있는 그대로 보여주는 용기가 필요합니다.",
            "연인과의 소통이 더욱 깊어지는 시기입니다. 진심을 담은 대화로 관계를 발전시켜보세요.",
            "혼자의 시간을 즐기며 자신을 돌아보는 것도 좋습니다. 자립적인 매력이 더해질 것입니다.",
            "과거의 상처를 치유하고 새로운 사랑을 준비하는 시기입니다. 마음의 정리가 필요해요.",
            "가족이나 친구들의 지지가 연애에 큰 도움이 될 것입니다. 주변의 조언에 귀 기울여보세요.",
            "진정한 사랑은 서두르지 않습니다. 자연스러운 흐름에 맡기며 기다리는 지혜가 필요해요."
        ],
        wealth: [
            "금전 운이 활짝 트입니다. 투자에 신중하면 좋은 성과를 거둘 수 있을 것입니다.",
            "계획보다 지출이 많을 수 있으니 절제가 필요합니다. 가계부 작성을 시작해보세요.",
            "의외의 수입이 생길 수 있는 시기입니다. 부업이나 투잡을 고려해볼 수 있어요.",
            "저축 습관을 기르기 좋은 때입니다. 작은 금액부터 꾸준히 모아나가시기 바랍니다.",
            "투자보다는 안전한 자산 관리에 집중하는 것이 좋습니다. 전문가의 조언을 구해보세요.",
            "금전적 여유가 생기면 베푸는 마음도 잊지 마세요. 나눔이 더 큰 복을 가져다줄 것입니다."
        ],
        business: [
            "사업 확장이나 새로운 도전을 시작하기 좋은 시기입니다. 준비된 자에게 기회가 찾아올 것입니다.",
            "기존 사업의 내실을 다지는 데 집중하시기 바랍니다. 기본기가 탄탄해야 성장할 수 있습니다.",
            "파트너십이나 협업을 통해 새로운 가능성을 발견할 수 있을 것입니다. 네트워킹에 힘쓰세요.",
            "고객 서비스 개선에 투자하면 좋은 결과를 얻을 수 있습니다. 고객의 소리에 귀 기울이세요.",
            "디지털 전환이나 기술 도입을 고려해볼 때입니다. 변화에 적응하는 유연성이 필요합니다."
        ],
        study: [
            "학습에 대한 집중력이 최고조에 달하는 시기입니다. 목표를 정하고 계획적으로 공부하세요.",
            "새로운 분야에 도전해볼 좋은 기회입니다. 호기심을 바탕으로 탐구해보시기 바랍니다.",
            "기초를 탄탄히 하는 것이 중요합니다. 기본기를 소홀히 하지 말고 차근차근 쌓아가세요.",
            "스터디 그룹이나 토론을 통해 학습 효과를 높일 수 있습니다. 혼자만의 공부에서 벗어나보세요.",
            "시험이나 자격증 취득에 유리한 시기입니다. 자신감을 갖고 도전해보시기 바랍니다."
        ],
        compatibility: [
            "두 사람은 서로를 보완해주는 좋은 궁합입니다. 차이점을 인정하고 존중하는 자세가 필요해요.",
            "성향 차이가 있지만 노력하면 조화로운 관계가 됩니다. 소통과 이해가 관계의 열쇠입니다.",
            "가치관 차이로 갈등이 있을 수 있으니 이해심이 필요합니다. 대화를 통해 해결해나가세요.",
            "서로에게 좋은 자극이 되는 관계입니다. 함께 성장할 수 있는 동반자가 될 수 있어요.",
            "인내와 배려가 필요한 관계입니다. 급하게 서두르지 말고 천천히 마음을 열어가세요.",
            "운명적인 만남의 가능성이 높습니다. 서로를 믿고 지지하는 관계로 발전시켜나가세요."
        ],
        "zodiac-sign": [
            "당신의 띠 특성이 오늘 특별히 빛을 발할 것입니다. 타고난 장점을 적극 활용해보세요.",
            "같은 띠를 가진 사람들과의 만남에서 좋은 에너지를 받을 수 있습니다. 동질감을 느껴보세요.",
            "띠의 고유한 성격이 오늘의 선택에 좋은 영향을 줄 것입니다. 직감을 믿고 행동하세요.",
            "전통적인 지혜가 현대적 문제 해결에 도움이 될 것입니다. 조상의 지혜를 되새겨보세요.",
            "띠가 가진 원래의 에너지로 돌아가는 것이 필요한 시기입니다. 본래의 모습을 찾아보세요."
        ],
        "past-life": [
            "전생의 기억이 꿈이나 직감으로 나타날 수 있습니다. 내면의 목소리에 귀 기울여보세요.",
            "과거의 인연이 현재의 만남으로 이어질 수 있습니다. 우연한 만남도 소중히 여기세요.",
            "전생의 재능이 현생에서 깨어날 조짐이 보입니다. 새로운 분야에 도전해보시기 바랍니다.",
            "전생의 업보를 선행으로 정화할 수 있는 시기입니다. 베푸는 마음을 실천해보세요.",
            "영혼의 성장을 위한 시험이 찾아올 수 있습니다. 인내심을 갖고 극복해나가세요."
        ],
        "wish-fortune": [
            "소원이 이루어질 가능성이 높습니다. 긍정적인 마음가짐을 유지하며 기다려보세요.",
            "소원 성취를 위해서는 더 많은 노력이 필요합니다. 포기하지 말고 계속 도전하세요.",
            "소원보다 더 좋은 것이 찾아올 수 있습니다. 열린 마음으로 변화를 받아들이세요.",
            "소원이 다른 형태로 이루어질 수 있습니다. 예상과 다르더라도 감사하는 마음을 가지세요.",
            "소원 성취를 위한 준비가 더 필요합니다. 차근차근 계획을 세우고 실행해나가세요."
        ],
        constellation: [
            "별자리의 영향으로 직감력이 높아지는 시기입니다. 첫인상과 느낌을 신뢰해보세요.",
            "행성의 배치가 창의력을 자극합니다. 예술적 영감을 받을 수 있는 좋은 시기예요.",
            "우주의 에너지가 변화를 촉진합니다. 새로운 시도나 도전을 두려워하지 마세요.",
            "별들의 조화로운 배치가 인간관계에 좋은 영향을 줄 것입니다. 소통에 집중해보세요.",
            "천체의 움직임이 내면의 평화를 가져다줍니다. 명상이나 휴식을 취하기 좋은 때입니다."
        ],
        lifetime: [
            "인생 전반에 걸쳐 꾸준한 상승세를 타게 될 것입니다. 장기적인 관점에서 계획을 세우세요.",
            "중년 이후에 큰 성취를 이룰 수 있는 운명입니다. 인내심을 갖고 기다리시기 바랍니다.",
            "평생에 걸쳐 좋은 인연들을 많이 만날 것입니다. 사람들과의 관계를 소중히 여기세요.",
            "건강한 장수를 누릴 수 있는 좋은 운세입니다. 규칙적인 생활 습관을 유지하세요.",
            "말년에 복이 많은 운명입니다. 젊은 시절의 노력이 큰 결실을 맺을 것입니다."
        ],
        tojung: [
            "토정비결에 따르면 올해는 변화의 해입니다. 동쪽 방향이 길하니 참고하시기 바랍니다.",
            "음력 3월과 9월에 특별한 기회가 찾아올 것입니다. 준비된 마음으로 맞이하세요.",
            "연장자나 경험이 많은 분의 조언이 큰 도움이 될 것입니다. 겸손한 자세로 들어보세요.",
            "물과 관련된 일에 주의하시고, 푸른색 계열의 물건이 행운을 가져다줄 것입니다.",
            "정남향이나 정북향으로의 이사나 이직이 길할 것입니다. 변화를 두려워하지 마세요."
        ]
    };

    const list = sampleFortunes[category] || sampleFortunes['today'];
    let selectedFortune = list[Math.floor(Math.random() * list.length)];
    
    // 현재 날짜 정보 추가
    const today = new Date();
    const currentYear = today.getFullYear();
    const currentMonth = today.getMonth() + 1;
    const currentDay = today.getDate();
    
    // 카테고리별 시간 맥락 추가
    let timeContext = "";
    if (category === 'today') {
        timeContext = ` 오늘 ${currentYear}년 ${currentMonth}월 ${currentDay}일은`;
    } else if (category === 'tomorrow') {
        const tomorrow = new Date(today);
        tomorrow.setDate(today.getDate() + 1);
        timeContext = ` ${tomorrow.getFullYear()}년 ${tomorrow.getMonth() + 1}월 ${tomorrow.getDate()}일은`;
    } else if (category === 'month') {
        timeContext = ` ${currentYear}년 ${currentMonth}월에는`;
    } else if (category === 'year') {
        timeContext = ` ${currentYear}년에는`;
    } else {
        timeContext = ` ${currentYear}년 현재`;
    }
    
    // 시간 맥락을 운세에 자연스럽게 통합
    selectedFortune = selectedFortune.replace(/^/, timeContext + ' ');
    
    // 개인화 요소 추가
    if (zodiac) {
        const zodiacInfluence = getZodiacInfluence(zodiac);
        selectedFortune += ` ${zodiacInfluence}`;
    }
    
    if (birthHour && birthHour !== 'unknown' && birthHour !== '모름') {
        const timeInfluence = getTimeInfluence(birthHour);
        selectedFortune += ` ${timeInfluence}`;
    }
    
    return selectedFortune;
}

// Flask API에서 운세 가져오기 - 개선된 버전
async function fetchFortuneFromAPI(category, userData) {
    // 궁합일 경우 user1, user2가 있는지 확인
    const isCompatibility = userData && userData.user1 && userData.user2;
    
    if (!userData || (!isCompatibility && !userData.birthDate)) {
        return null;
    }

    // 시작 시간 기록 (성능 로깅용)
    const startTime = performance.now();

    // 카테고리명을 한국어로 변환 (백엔드 API와 매핑)
    const categoryMap = {
        'today': '오늘의 운세',
        'tomorrow': '내일의 운세', 
        'month': '이달의 운세',
        'year': '올해의 운세',
        'lifetime': '평생운세',
        'tojung': '토정비결',
        'love': '연애운',
        'wealth': '재물운', 
        'business': '사업운',
        'study': '학업운',
        'compatibility': '궁합',
        'zodiac-sign': '띠별 운세',
        'past-life': '전생 운세',
        'wish-fortune': '소원 성취 운세',
        'constellation': '별자리 운세'
    };

    const koreanCategory = categoryMap[category] || category;

    // 복잡한 카테고리는 더 긴 타임아웃 적용 (60초)
    const heavyCategories = ['year', 'compatibility', 'lifetime'];
    const timeoutMs = heavyCategories.includes(category) ? 60000 : 30000;

    // AbortController로 타임아웃 구현
    const controller = new AbortController();
    const timeoutId = setTimeout(() => {
        controller.abort();
    }, timeoutMs);

    // API URL 설정 (상대경로 사용)
    const apiUrl = '/api/saju';

    try {
        showAPILoadingMessage(koreanCategory);
        console.log(`🔍 API 연결 시도: ${apiUrl} (타임아웃: ${timeoutMs}ms)`);
        
        // 궁합일 경우와 일반 운세일 경우 요청 데이터 구조가 다름
        let requestBody;
        if (isCompatibility) {
            requestBody = {
                user1: userData.user1,
                user2: userData.user2,
                category: koreanCategory
            };
            console.log('📤 궁합 데이터 전송:', requestBody);
        } else {
            requestBody = {
                birthDate: userData.birthDate,
                birthTime: userData.birthTime || '모름',
                gender: userData.gender || '',
                calendarType: userData.calendarType || 'solar',
                category: koreanCategory
            };
        }
        
        let response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody),
            signal: controller.signal
        });

        // 타임아웃 클리어
        clearTimeout(timeoutId);

        if (response.ok) {
            console.log(`✅ API 연결 성공: ${apiUrl}`);
            const data = await response.json().catch(() => ({ status: "error", message: "파싱 오류" }));
            console.log('📡 API 응답 원본:', data);
            
            // 🔍 1단계: 응답 구조 검증
            if (!data || typeof data !== 'object') {
                console.error('❌ 잘못된 응답 형식:', data);
                throw new Error('서버에서 올바르지 않은 응답을 받았습니다.');
            }

            // 🔍 2단계: success 필드 확인
            if (!data.success) {
                console.error('❌ API 실패 응답:', data.error || '알 수 없는 오류');
                throw new Error(data.error || 'API에서 실패 응답을 받았습니다.');
            }

            // 🔍 3단계: result 데이터 존재 확인 (백엔드는 result 키로 보냄)
            if (!data.result) {
                console.error('❌ result 키가 없음:', data);
                throw new Error('운세 데이터가 응답에 포함되지 않았습니다.');
            }

            hideAPILoadingMessage();
            showToast('🔮 운세의 결과가 나왔습니다!');
            
            // 백엔드에서 받은 텍스트를 그대로 content로 반환
            console.log('🔮 백엔드 응답 데이터:', data.result);
            
            return {
                content: data.result
            };
                
                // 🛡️ [object Object] 방지 안전한 JSON 구조 처리
                const cleanText = (text) => {
                    console.log('🔍 cleanText 입력:', typeof text, text);
                    
                    // 🔍 undefined, null 체크
                    if (text === undefined) {
                        console.warn('⚠️ cleanText: undefined 값 감지됨');
                        return '정보를 불러올 수 없습니다.';
                    }
                    if (text === null) {
                        console.warn('⚠️ cleanText: null 값 감지됨');
                        return '정보가 제공되지 않았습니다.';
                    }
                    
                    // 🚫 [object Object] 방지: 객체 타입 체크
                    if (typeof text === 'object') {
                        console.warn('⚠️ cleanText: 객체 감지됨, 간단 파싱 시도');
                        
                        // 간단한 객체 파싱 (fetchFortuneFromAPI 내부용)
                        const possibleKeys = ['result', 'content', 'text', '제목', '성격해석', '운세 해석'];
                        for (const key of possibleKeys) {
                            if (text[key] && typeof text[key] === 'string') {
                                console.log(`✅ 키 "${key}"에서 텍스트 발견`);
                                return text[key];
                            }
                        }
                        
                        // 첫 번째 문자열 값 반환
                        for (const [key, value] of Object.entries(text)) {
                            if (typeof value === 'string' && value.trim() !== '') {
                                console.log(`✅ 키 "${key}"에서 문자열 발견`);
                                return value;
                            }
                        }
                        
                        return '객체에서 텍스트를 추출할 수 없습니다.';
                    }
                    
                    // 🔍 문자열 타입 체크 및 변환
                    let safeText;
                    try {
                        if (typeof text === 'string') {
                            safeText = text;
                        } else {
                            safeText = String(text);
                            
                            // String 변환 후 [object Object] 체크
                            if (safeText === '[object Object]') {
                                console.error('❌ cleanText: [object Object] 감지됨');
                                return '⚠️ 운세를 불러오는 데 문제가 발생했습니다. 다시 시도해주세요.';
                            }
                        }
                    } catch (error) {
                        console.error('❌ cleanText: 문자열 변환 실패:', error, text);
                        return '텍스트 변환 중 오류가 발생했습니다.';
                    }
                    
                    // 🔍 정리 및 검증
                    const cleaned = safeText.replace(/\\n/g, '\n').replace(/\n/g, '<br>').trim();
                    return cleaned || '내용이 비어있습니다.';
                };
                
                const result = {
                    title: cleanText(fortune.제목 || fortune.title || ''),
                    sections: {
                        성격해석: cleanText(fortune.성격해석 || fortune.성격 || ''),
                        직업및재물운: cleanText(fortune.직업및재물운 || fortune.직업 || ''),
                        인간관계: cleanText(fortune.인간관계 || fortune.재물 || ''),
                        조언및주의사항: cleanText(fortune.조언및주의사항 || fortune.조언 || ''),
                        활용방향: cleanText(fortune.활용방향 || '')
                    }
                };
                
                // 올해의 운세인 경우 월별 데이터 처리
                if (category === 'year' && fortune['1월']) {
                    result.monthlyData = {};
                    for (let i = 1; i <= 12; i++) {
                        const monthKey = `${i}월`;
                        if (fortune[monthKey]) {
                            result.monthlyData[monthKey] = cleanText(fortune[monthKey]);
                        }
                    }
                    if (fortune.전체조언) {
                        result.monthlyData.전체조언 = cleanText(fortune.전체조언);
                    }
                }
                
                console.log('✅ 최종 처리된 운세:', result);
                return result;
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
    } catch (error) {
        // 타임아웃 정리 (에러 발생 시)
        clearTimeout(timeoutId);
        
        console.warn(`⚠️ API 호출 실패, 재시도 중: ${error.message}`);
        
        // 1회 재시도
        try {
            console.log('🔄 API 재시도 중...');
            const retryResponse = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    birthDate: userData.birthDate,
                    birthTime: userData.birthTime || '모름',
                    gender: userData.gender || '',
                    calendarType: userData.calendarType || 'solar',
                    category: koreanCategory
                })
            });
            
            const retryData = await retryResponse.json().catch(() => ({ status: "error", message: "파싱 오류" }));
            
            if (retryResponse.ok && retryData.status === "ok") {
                console.log('✅ 재시도 성공!');
                return retryData;
            } else {
                throw new Error(retryData.message || "재시도도 실패했습니다.");
            }
            
        } catch (retryError) {
            console.error(`❌ 재시도도 실패: ${retryError.message}`);
            
            // 로딩 오버레이 제거
            hideAPILoadingMessage();
            
            // 경과 시간 계산
            const elapsedMs = Math.round(performance.now() - startTime);
            
            // 에러 타입별 분류 및 로깅
            let errorType = 'unknown';
            let httpStatus = null;
            
            if (error.name === 'AbortError') {
                errorType = 'timeout';
            } else if (error.message.includes('HTTP')) {
                errorType = 'http_error';
                const statusMatch = error.message.match(/HTTP (\d+)/);
                httpStatus = statusMatch ? parseInt(statusMatch[1]) : null;
            } else if (error.message.includes('Failed to fetch') || error.message.includes('네트워크')) {
                errorType = 'network_error';
            } else if (error.message.includes('JSON')) {
                errorType = 'parse_error';
            }
            
            // 상세 디버그 로그
            console.error('💥 API 호출 실패:', {
                category: koreanCategory,
                elapsed_ms: elapsedMs,
                error_name: errorType,
                http_status: httpStatus,
                timeout_ms: timeoutMs,
                message: error.message
            });
            
            // 사용자 친화적 에러 메시지 표시
            showToast('⚠️ 운세를 불러오는 데 문제가 발생했습니다. 다시 시도해주세요.');
            
            throw retryError;
        }
    }
}

// 🔮 신비로운 도사 테마 로딩 UI 표시
function showAPILoadingMessage(category) {
    // 로딩 오버레이 표시
    const loadingOverlay = document.getElementById('dosa-loading-overlay');
    if (loadingOverlay) {
        // 확실히 보이도록 display 설정
        loadingOverlay.style.display = 'flex';
        loadingOverlay.classList.add('active');
        
        // 로딩 메시지 업데이트
        const loadingMessage = loadingOverlay.querySelector('.loading-message');
        if (loadingMessage) {
            loadingMessage.textContent = `${category}를 풀이하고 있습니다...`;
        }
    }

    // 예상 대기 시간 설정 (카테고리별)
    const estimatedTimes = {
        '올해의 운세': 35,
        '평생운세': 18,
        '토정비결': 15,
        '띠별 운세': 15,
        '궁합': 16,
        '소원 성취 운세': 12,
        '별자리 운세': 14,
        '애정운': 12,
        '연애운': 12,
        '재물운': 12,
        '사업운': 13,
        '학업운': 12,
        '전생 운세': 14,
        '오늘의 운세': 12,
        '내일의 운세': 12,
        '이달의 운세': 14
    };
    
    const estimatedTime = estimatedTimes[category] || 13;

    // 🔮 전체화면 신비로운 도사 로딩 UI 생성
    const dosaLoader = document.createElement('div');
    dosaLoader.className = 'dosa-loading-container';
    dosaLoader.innerHTML = `
        <div class="dosa-symbol-animation"></div>
        <h1 class="dosa-title">도사세계로 접속 중입니다...</h1>
        <p class="dosa-subtitle">신비로운 ${category} 운세를 불러오고 있으니 잠시만 기다려 주세요…</p>
        <div class="mystic-loader"></div>
        <div class="loader-label">운세 정령을 부르는 중...</div>
        <div class="dosa-progress-container">
            <div class="dosa-time-display">예상 소요 시간: <span id="dosa-eta">${estimatedTime}초</span></div>
            <div class="dosa-progress-bar">
                <div class="dosa-progress-fill" id="dosa-progress"></div>
            </div>
        </div>
    `;
    
    // body에 직접 추가하여 전체화면 표시
    document.body.appendChild(dosaLoader);
    
    // 진행 바 애니메이션 시작
    startDosaProgressAnimation(estimatedTime);
    
    // 결과 페이지로 이동 (로딩 완료 후)
    showPage('fortune-result');
}

// 🔮 도사 테마 진행바 애니메이션 함수
function startDosaProgressAnimation(duration) {
    const progressFill = document.getElementById('dosa-progress');
    const etaSpan = document.getElementById('dosa-eta');
    
    if (!progressFill || !etaSpan) return;
    
    let startTime = Date.now();
    let animationId;
    
    function updateDosaProgress() {
        const elapsed = Date.now() - startTime;
        const progress = Math.min((elapsed / (duration * 1000)) * 100, 100);
        const remainingTime = Math.max(Math.ceil(duration - (elapsed / 1000)), 0);
        
        // 🔮 신비로운 진행바 업데이트
        progressFill.style.width = `${progress}%`;
        etaSpan.textContent = `${remainingTime}초`;
        
        // 🔮 진행률에 따른 추가 효과
        if (progress > 50) {
            progressFill.style.boxShadow = `
                0 0 20px rgba(255, 215, 0, 0.6),
                0 0 40px rgba(255, 215, 0, 0.3)
            `;
        }
        
        if (progress < 100) {
            animationId = requestAnimationFrame(updateDosaProgress);
        } else {
            // 🔮 완료시 특별 효과
            progressFill.style.boxShadow = `
                0 0 30px rgba(255, 215, 0, 0.8),
                0 0 60px rgba(255, 215, 0, 0.4)
            `;
            etaSpan.textContent = '완료!';
        }
    }
    
    // 애니메이션 시작
    animationId = requestAnimationFrame(updateDosaProgress);
    
    // 로딩 UI 참조를 저장하여 나중에 정리할 수 있도록 함
    if (window.dosaLoadingAnimation) {
        cancelAnimationFrame(window.dosaLoadingAnimation);
    }
    window.dosaLoadingAnimation = animationId;
}

// 🔮 도사 테마 로딩 메시지 숨기기
function hideAPILoadingMessage() {
    // 로딩 오버레이 숨기기
    const loadingOverlay = document.getElementById('dosa-loading-overlay');
    if (loadingOverlay) {
        loadingOverlay.classList.remove('active');
        // 확실히 숨기기 위해 display도 none으로
        setTimeout(() => {
            loadingOverlay.style.display = 'none';
        }, 300);
    }
}

// 운세 결과 표시 함수에 API 연동 강화
async function showFortuneResult(fortuneType, isCompatibility = false) {
    // 사용자 데이터 확인
    if (!currentUser && fortuneType !== 'wish-fortune') {
        showToast('먼저 생년월일 정보를 입력해주세요.');
        showPage('birth-input');
        return;
    }

    // API 호출을 통한 동적 운세 생성
    let apiFortuneResult = null;
    if (fortuneType === 'compatibility' && currentPartner) {
        // 궁합은 두 사람의 정보를 함께 전송
        try {
            const compatibilityData = {
                user1: currentUser,
                user2: currentPartner
            };
            apiFortuneResult = await fetchFortuneFromAPI(fortuneType, compatibilityData);
        } catch (error) {
            console.error('궁합 API 호출 실패:', error);
            hideAPILoadingMessage();
            document.getElementById('fortune-text').innerHTML = `
                <div class="error-message">
                    <p>⚠️ 궁합을 불러오는 데 문제가 발생했습니다. 다시 시도해주세요.</p>
                </div>
            `;
            showPage('fortune-result');
            return;
        }
    } else if (fortuneType !== 'wish-fortune') {
        try {
            apiFortuneResult = await fetchFortuneFromAPI(fortuneType, currentUser);
        } catch (error) {
            console.error('API 호출 실패:', error);
            // 로딩 메시지 확실히 제거
            hideAPILoadingMessage();
            
            // 에러 결과 직접 표시
            document.getElementById('fortune-text').innerHTML = `
                <div class="error-message">
                    <p>⚠️ 운세를 불러오는 데 문제가 발생했습니다. 다시 시도해주세요.</p>
                </div>
            `;
            showPage('fortune-result');
            return;
        }
    }

    const fortuneData_item = fortuneData[fortuneType];
    if (!fortuneData_item) return;

    // 제목 설정 (날짜 표시 안함)
    if (fortuneType === 'zodiac-sign') {
        const userZodiac = getUserZodiac(currentUser);
        const zodiacIcon = fortuneData_item.zodiacIcons[userZodiac];
        document.getElementById('fortune-title').textContent = `${zodiacIcon} ${userZodiac} 운세`;
    } else {
        // 모든 운세에서 날짜 표시하지 않음
        document.getElementById('fortune-title').textContent = fortuneData_item.title;
    }

    // 사용자 정보 표시
    let userInfoText = '';
    if (isCompatibility && currentPartner) {
        userInfoText = `${formatBirthInfo(currentUser)} ♥ ${formatBirthInfo(currentPartner)}`;
    } else if (fortuneType === 'wish-fortune') {
        const wish = sessionStorage.getItem('currentWish');
        userInfoText = wish ? `소원: "${wish}"` : '';
    } else if (fortuneType === 'zodiac-sign' && currentUser) {
        const userZodiac = getUserZodiac(currentUser);
        const zodiacIcon = fortuneData_item.zodiacIcons[userZodiac];
        userInfoText = `${formatBirthInfo(currentUser)} | ${zodiacIcon} ${userZodiac}`;
    } else if (currentUser) {
        userInfoText = formatBirthInfo(currentUser);
    } else {
        userInfoText = '생년월일 정보 없음';
    }
    document.getElementById('user-birth-info').textContent = userInfoText;

    // 출생시간 모름 여부 체크 (소원 운세와 띠별 운세는 예외)
    const hasUnknownTime = fortuneType !== 'wish-fortune' && fortuneType !== 'zodiac-sign' &&
                           ((currentUser && (currentUser.birthTime === '모름' || currentUser.birthTime === 'unknown')) || 
                            (isCompatibility && currentPartner && (currentPartner.birthTime === '모름' || currentPartner.birthTime === 'unknown')));

    let fortuneHTML = '';

    // 정확도 메시지 추가
    const accuracyMessage = hasUnknownTime ? 
        '<div class="accuracy-notice">⚠️ 출생 시간을 모르므로 정확도는 다소 낮을 수 있습니다.</div>' : '';

    if (fortuneType === 'compatibility' && currentPartner) {
        // API 결과가 있으면 API 결과 사용, 없으면 시뮬레이션
        if (apiFortuneResult && apiFortuneResult.content) {
            // API에서 받은 궁합 분석 사용
            let formattedContent = apiFortuneResult.content
                .replace(/\*\*(.*?)\*\*/g, '<strong class="highlight">$1</strong>')
                .replace(/\n\n/g, '</p><p>')
                .replace(/\n/g, '<br>');
            
            fortuneHTML = accuracyMessage + `
                <div class="fortune-section main-fortune">
                    <h3>👫 궁합 분석</h3>
                    <p style="white-space: pre-line; line-height: 2;">${formattedContent}</p>
                </div>
            `;
        } else {
            // 로컬 시뮬레이션 (fallback)
            fortuneHTML = accuracyMessage + await generateCompatibilityResult();
        }
    } else if (fortuneType === 'zodiac-sign') {
        // 띠별 운세를 위한 동적 생성
        const userZodiac = getUserZodiac(currentUser);
        const zodiacIcon = fortuneData_item.zodiacIcons[userZodiac];
        const birthYear = new Date(currentUser.birthDate).getFullYear();
        
        // API 결과가 있으면 사용, 없으면 시뮬레이션
        let dynamicFortune;
        if (apiFortuneResult && typeof apiFortuneResult === 'object') {
            dynamicFortune = apiFortuneResult.content;
        } else {
            dynamicFortune = await generateFortune(
                'zodiac-sign', 
                birthYear, 
                currentUser.birthTime, 
                userZodiac, 
                currentUser.gender,
                currentUser
            );
        }
        const dynamicAdvice = generateAdvice('zodiac-sign', currentUser);
        const dynamicLucky = generateLuckyItems('zodiac-sign', userZodiac);
        
        fortuneHTML = `
            <div class="zodiac-header">
                <div class="zodiac-icon">${zodiacIcon}</div>
                <h2 class="zodiac-name">${userZodiac}</h2>
                <p class="zodiac-description">출생년도: ${birthYear}년 (${userZodiac})</p>
            </div>
            
            <div class="fortune-section main-fortune">
                <h3>📜 오늘의 운세</h3>
                <p>${dynamicFortune}</p>
            </div>
            
            <div class="fortune-section advice-section">
                <h3>✅ 조언</h3>
                <ul>
                    ${dynamicAdvice.map(item => `<li>${item}</li>`).join('')}
                </ul>
            </div>
            
            <div class="fortune-section lucky-section">
                <h3>🧧 오늘의 행운</h3>
                <div class="lucky-items">
                    <div class="lucky-item">
                        <span class="lucky-label">행운의 색깔:</span>
                        <span class="lucky-value" style="color: ${dynamicLucky.color}; font-weight: bold;">${dynamicLucky.color}</span>
                    </div>
                    <div class="lucky-item">
                        <span class="lucky-label">행운의 숫자:</span>
                        <span class="lucky-value">${dynamicLucky.number}</span>
                    </div>
                    <div class="lucky-item">
                        <span class="lucky-label">행운의 아이템:</span>
                        <span class="lucky-value">${dynamicLucky.item}</span>
                    </div>
                </div>
            </div>
        `;
    } else if (fortuneType === 'wish-fortune') {
        // 소원 운세를 위한 특별 처리 (사용자 정보 없어도 가능)
        const wish = sessionStorage.getItem('currentWish');
        const birthYear = currentUser ? new Date(currentUser.birthDate).getFullYear() : new Date().getFullYear();
        const userZodiac = currentUser ? getUserZodiac(currentUser) : null;
        
        // 소원 기반 운세 생성
        const wishFortune = generateWishFortune(wish, birthYear, userZodiac);
        const dynamicAdvice = generateAdvice('wish-fortune', currentUser);
        const dynamicLucky = generateLuckyItems('wish-fortune', userZodiac);
        
        fortuneHTML = `
            <div class="wish-section">
                <h3>✨ 소원 분석</h3>
                <div class="wish-display">
                    <p>"${wish}"</p>
                </div>
            </div>
            
            <div class="fortune-section main-fortune">
                <h3>🔮 소원 성취 운세</h3>
                <p>${wishFortune}</p>
            </div>
            
            <div class="fortune-section advice-section">
                <h3>💡 성취를 위한 조언</h3>
                <ul>
                    ${dynamicAdvice.map(item => `<li>${item}</li>`).join('')}
                </ul>
            </div>
            
            <div class="fortune-section lucky-section">
                <h3>🧧 소원 성취 행운</h3>
                <div class="lucky-items">
                    <div class="lucky-item">
                        <span class="lucky-label">행운의 색깔:</span>
                        <span class="lucky-value" style="color: ${dynamicLucky.color}; font-weight: bold;">${dynamicLucky.color}</span>
                    </div>
                    <div class="lucky-item">
                        <span class="lucky-label">행운의 숫자:</span>
                        <span class="lucky-value">${dynamicLucky.number}</span>
                    </div>
                    <div class="lucky-item">
                        <span class="lucky-label">행운의 아이템:</span>
                        <span class="lucky-value">${dynamicLucky.item}</span>
                    </div>
                </div>
            </div>
        `;
    } else {
        // 일반 운세를 위한 동적 생성
        const birthYear = currentUser ? new Date(currentUser.birthDate).getFullYear() : new Date().getFullYear();
        const userZodiac = currentUser ? getUserZodiac(currentUser) : null;
        
        if (apiFortuneResult && typeof apiFortuneResult === 'object') {
            // 🔍 API 결과 구조 검증
            console.log('🎨 API 결과 렌더링:', apiFortuneResult);
            
            // 🔧 GPT 응답 구조별 파싱 함수
            function parseGPTResponse(responseData) {
                console.log('🔍 GPT 응답 파싱 시작:', responseData);
                
                if (!responseData || typeof responseData !== 'object') {
                    console.error('❌ 유효하지 않은 응답 데이터');
                    return '⚠️ 운세를 불러오는 데 문제가 발생했습니다. 다시 시도해주세요.';
                }
                
                const sections = [];
                const keys = Object.keys(responseData);
                console.log('🔍 응답 키들:', keys);
                
                // 🔍 제목 처리
                let title = '';
                if (responseData['제목']) {
                    title = safeExtractText(responseData['제목']);
                } else if (responseData['title']) {
                    title = safeExtractText(responseData['title']);
                }
                
                if (title && title !== '운세 데이터를 처리할 수 없습니다.') {
                    sections.push(`<h3 class="api-title">${title}</h3>`);
                }
                
                // 🔍 월별 데이터 처리 (올해의 운세)
                const months = ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'];
                const monthlyData = [];
                for (const month of months) {
                    if (responseData[month]) {
                        const monthText = safeExtractText(responseData[month]);
                        if (monthText && monthText !== '운세 데이터를 처리할 수 없습니다.') {
                            monthlyData.push(`<div class="month-section"><h4>📅 ${month}</h4><p>${monthText}</p></div>`);
                        }
                    }
                }
                
                if (monthlyData.length > 0) {
                    sections.push('<div class="monthly-fortune">' + monthlyData.join('') + '</div>');
                }
                
                // 🔍 일반 섹션 처리 (성격해석, 운세 해석 등)
                const generalSections = [];
                for (const [key, value] of Object.entries(responseData)) {
                    // 제목과 월별 데이터는 이미 처리했으므로 스킵
                    if (key === '제목' || key === 'title' || months.includes(key)) {
                        continue;
                    }
                    
                    const sectionText = safeExtractText(value);
                    if (sectionText && sectionText !== '운세 데이터를 처리할 수 없습니다.') {
                        // 섹션별 이모지 추가
                        let emoji = '📝';
                        if (key.includes('성격')) emoji = '🧠';
                        else if (key.includes('직업') || key.includes('재물')) emoji = '💼';
                        else if (key.includes('인간관계')) emoji = '👥';
                        else if (key.includes('조언')) emoji = '💡';
                        else if (key.includes('운세')) emoji = '🔮';
                        else if (key.includes('해석')) emoji = '🔍';
                        
                        generalSections.push(`<div class="fortune-section"><h4>${emoji} ${key}</h4><p>${sectionText}</p></div>`);
                    }
                }
                
                if (generalSections.length > 0) {
                    sections.push('<div class="general-sections">' + generalSections.join('') + '</div>');
                }
                
                // 🔍 최종 결과 생성
                if (sections.length === 0) {
                    console.warn('⚠️ 파싱된 섹션이 없음, 원본 데이터 확인');
                    
                    // 최후 수단: 객체의 모든 값을 나열
                    const fallbackSections = [];
                    for (const [key, value] of Object.entries(responseData)) {
                        const text = safeExtractText(value);
                        if (text && text.length > 5) { // 의미있는 길이의 텍스트만
                            fallbackSections.push(`<div class="fallback-section"><strong>${key}:</strong> ${text}</div>`);
                        }
                    }
                    
                    if (fallbackSections.length > 0) {
                        return '<div class="fallback-content">' + fallbackSections.join('') + '</div>';
                    }
                    
                    return '⚠️ 운세를 불러오는 데 문제가 발생했습니다. 다시 시도해주세요.';
                }
                
                const finalHTML = sections.join('');
                console.log('✅ GPT 응답 파싱 완료, HTML 길이:', finalHTML.length);
                return finalHTML;
            }

            // 🛡️ 예상치 못한 값 디버깅
            // 🛡️ content 필드가 있으면 직접 표시 (백엔드가 텍스트만 보내는 경우)
            if (apiFortuneResult.content) {
                console.log('✅ content 필드 감지, 직접 표시');
                
                // **강조** 표시를 HTML로 변환
                let formattedContent = apiFortuneResult.content
                    .replace(/\*\*(.*?)\*\*/g, '<strong class="highlight">$1</strong>')  // **강조** -> <strong>
                    .replace(/\n\n/g, '</p><p>')  // 빈 줄 -> 문단 나누기
                    .replace(/\n/g, '<br>');  // 일반 줄바꿈 -> <br>
                
                fortuneHTML = accuracyMessage + `
                    <div class="fortune-section main-fortune">
                        <p style="white-space: pre-line; line-height: 2;">${formattedContent}</p>
                    </div>
                `;
                
                const fortuneTextElement = document.getElementById('fortune-text');
                if (fortuneTextElement) {
                    fortuneTextElement.innerHTML = fortuneHTML;
                    hideAPILoadingMessage();
                    showPage('fortune-result');
                    return;
                }
            }
            
            if (!apiFortuneResult.title && !apiFortuneResult.sections && !apiFortuneResult.monthlyData) {
                console.error('❌ 예상치 못한 API 결과 구조:', {
                    keys: Object.keys(apiFortuneResult),
                    hasTitle: !!apiFortuneResult.title,
                    hasSections: !!apiFortuneResult.sections,
                    hasMonthlyData: !!apiFortuneResult.monthlyData,
                    fullObject: JSON.stringify(apiFortuneResult, null, 2)
                });
                
                // 🔧 구조가 예상과 다르면 직접 파싱 시도
                console.log('🔧 직접 파싱 시도...');
                const directParsed = parseGPTResponse(apiFortuneResult);
                if (directParsed && !directParsed.includes('문제가 발생했습니다')) {
                    fortuneHTML = accuracyMessage + `<div class="fortune-section main-fortune">${directParsed}</div>`;
                    
                    // HTML 설정하고 종료
                    const fortuneTextElement = document.getElementById('fortune-text');
                    if (fortuneTextElement) {
                        fortuneTextElement.innerHTML = fortuneHTML;
                        hideAPILoadingMessage();
                        showPage('fortune-result');
                        return; // 조기 종료
                    }
                }
            }
            
            // 🛡️ [object Object] 방지 안전한 텍스트 추출 함수
            function safeExtractText(data) {
                console.log('🔍 safeExtractText 입력:', typeof data, data);
                
                // 🚫 [object Object] 방지: 객체 타입 체크
                if (typeof data === 'object' && data !== null) {
                    console.warn('⚠️ 객체 감지됨, 문자열 추출 시도');
                    
                    // 🔍 다양한 키 시도해서 텍스트 추출
                    const possibleKeys = ['result', 'fortune', 'content', 'text', '제목', '성격해석', '운세 해석', '1월', '직업운', '재물운'];
                    for (const key of possibleKeys) {
                        if (data[key] && typeof data[key] === 'string') {
                            console.log(`✅ 키 "${key}"에서 텍스트 발견:`, data[key].substring(0, 50) + '...');
                            return data[key];
                        }
                    }
                    
                    // 🔍 객체의 모든 문자열 값을 결합
                    const textValues = [];
                    for (const [key, value] of Object.entries(data)) {
                        if (typeof value === 'string' && value.trim() !== '') {
                            textValues.push(`**${key}**: ${value}`);
                        }
                    }
                    
                    if (textValues.length > 0) {
                        console.log('✅ 객체에서 문자열 값들 결합:', textValues.length + '개');
                        return textValues.join('\n\n');
                    }
                    
                    console.error('❌ 객체에서 유효한 문자열을 찾을 수 없음:', Object.keys(data));
                    return '운세 데이터를 처리할 수 없습니다.';
                }
                
                // 🔍 문자열인 경우 그대로 반환
                if (typeof data === 'string') {
                    return data;
                }
                
                // 🔍 기타 타입 처리
                if (data === undefined) {
                    console.warn('⚠️ undefined 값 감지됨');
                    return '정보를 불러올 수 없습니다.';
                }
                if (data === null) {
                    console.warn('⚠️ null 값 감지됨');
                    return '정보가 제공되지 않았습니다.';
                }
                
                // 🔍 최후 수단: String() 변환 후 검증
                try {
                    const converted = String(data);
                    if (converted === '[object Object]') {
                        console.error('❌ [object Object] 감지됨, fallback 적용');
                        return '⚠️ 운세를 불러오는 데 문제가 발생했습니다. 다시 시도해주세요.';
                    }
                    return converted;
                } catch (error) {
                    console.error('❌ String 변환 실패:', error, data);
                    return '텍스트 변환 중 오류가 발생했습니다.';
                }
            }

            // 🛡️ 강화된 텍스트 정리 함수 (undefined 방지)
            function cleanDisplayText(text) {
                // 🔍 먼저 안전한 텍스트 추출
                const safeText = safeExtractText(text);
                
                // 🔍 정리 및 검증
                const cleaned = safeText
                    .replace(/\\n/g, '<br>')    // 백슬래시-n을 <br>로
                    .replace(/\\"/g, '"')       // 백슬래시 따옴표 제거
                    .replace(/\s+/g, ' ')       // 여러 공백을 하나로
                    .trim();
                
                return cleaned || '내용이 비어있습니다.';
            }
            
            // ✨ 새로운 JSON 구조 처리 (6개 섹션 통일 구조)
            let safeContent = '';
            
            // 🛡️ 올해의 운세 (월별 데이터) 안전 처리
            if (fortuneType === 'year' && apiFortuneResult.monthlyData) {
                console.log('🔍 월별 데이터 처리 시작:', apiFortuneResult.monthlyData);
                
                // 월별 운세 렌더링
                const months = ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'];
                safeContent = months.map(month => {
                    if (apiFortuneResult.monthlyData[month]) {
                        const rawData = apiFortuneResult.monthlyData[month];
                        console.log(`🔍 ${month} 원본 데이터:`, typeof rawData, rawData);
                        
                        // 🚫 [object Object] 방지
                        let cleanText;
                        if (typeof rawData === 'object') {
                            console.warn(`⚠️ ${month} 데이터가 객체입니다, 파싱 시도`);
                            cleanText = parseGPTResponse(rawData);
                        } else {
                            cleanText = cleanDisplayText(rawData);
                        }
                        
                        if (cleanText && !cleanText.includes('문제가 발생했습니다')) {
                            return `<div class="fortune-subsection">
                                <h4 class="subsection-title">📅 ${month}</h4>
                                <div class="subsection-content">${cleanText}</div>
                            </div>`;
                        }
                    }
                    return '';
                }).filter(content => content).join('');
                
                // 전체 조언 추가
                if (apiFortuneResult.monthlyData['조언'] || apiFortuneResult.monthlyData['전체조언']) {
                    const rawAdvice = apiFortuneResult.monthlyData['조언'] || apiFortuneResult.monthlyData['전체조언'];
                    console.log('🔍 전체 조언 원본 데이터:', typeof rawAdvice, rawAdvice);
                    
                    // 🚫 [object Object] 방지
                    let cleanAdvice;
                    if (typeof rawAdvice === 'object') {
                        console.warn('⚠️ 조언 데이터가 객체입니다, 파싱 시도');
                        cleanAdvice = parseGPTResponse(rawAdvice);
                    } else {
                        cleanAdvice = cleanDisplayText(rawAdvice);
                    }
                    
                    if (cleanAdvice && !cleanAdvice.includes('문제가 발생했습니다')) {
                        safeContent += `<div class="fortune-subsection">
                            <h4 class="subsection-title">💎 전체 조언</h4>
                            <div class="subsection-content">${cleanAdvice}</div>
                        </div>`;
                    }
                }
                
            } else if (apiFortuneResult.sections) {
                // 🛡️ 일반 운세 구조 안전 처리 (새로운 6개 섹션)
                console.log('🔍 일반 섹션 처리 시작:', apiFortuneResult.sections);
                
                const sections = [
                    { key: '성격해석', icon: '🔍', label: '성격 해석' },
                    { key: '직업및재물운', icon: '💼', label: '직업 및 재물운' },
                    { key: '인간관계', icon: '👥', label: '인간관계' },
                    { key: '조언및주의사항', icon: '⚠️', label: '조언 및 주의사항' },
                    { key: '활용방향', icon: '🧭', label: '활용 방향' }
                ];
                
                safeContent = sections.map(section => {
                    const rawContent = apiFortuneResult.sections[section.key];
                    console.log(`🔍 ${section.key} 원본 데이터:`, typeof rawContent, rawContent);
                    
                    if (rawContent) {
                        // 🚫 [object Object] 방지
                        let cleanText;
                        if (typeof rawContent === 'object') {
                            console.warn(`⚠️ ${section.key} 데이터가 객체입니다, 파싱 시도`);
                            cleanText = parseGPTResponse(rawContent);
                        } else {
                            cleanText = cleanDisplayText(rawContent);
                        }
                        
                        if (cleanText && !cleanText.includes('문제가 발생했습니다')) {
                            return `<div class="fortune-subsection">
                                <h4 class="subsection-title">${section.icon} ${section.label}</h4>
                                <div class="subsection-content">${cleanText}</div>
                            </div>`;
                        }
                    }
                    return '';
                }).filter(content => content).join('');
            } else {
                // 🔧 예상치 못한 구조 - 직접 파싱
                console.log('🔧 예상치 못한 구조, 직접 파싱 시도');
                safeContent = parseGPTResponse(apiFortuneResult);
            }
            
            // 🛡️ 안전한 HTML 렌더링 시스템  
            let cleanTitle;
            try {
                cleanTitle = cleanDisplayText(apiFortuneResult.title || apiFortuneResult.제목 || '운세 결과');
                if (cleanTitle === '정보를 불러올 수 없습니다.' || cleanTitle === '내용이 비어있습니다.') {
                    cleanTitle = `${fortuneData_item?.title || '운세'} 결과`;
                }
            } catch (error) {
                console.error('❌ 제목 처리 실패:', error);
                cleanTitle = `${fortuneData_item?.title || '운세'} 결과`;
            }
            
            // 🛡️ 콘텐츠 검증 및 fallback 처리
            if (!safeContent || safeContent.trim() === '' || safeContent.includes('정보를 불러올 수 없습니다')) {
                console.warn('⚠️ 콘텐츠가 비어있거나 오류 상태, fallback 적용');
                safeContent = `<div class="error-message">
                    <p>⚠️ 운세를 불러오는 데 문제가 발생했습니다. 다시 시도해주세요.</p>
                    <small>API 응답: ${Object.keys(apiFortuneResult).length}개 키 감지됨</small>
                </div>`;
            }
            
            console.log('✅ 최종 렌더링 준비 완료:', { title: cleanTitle, contentLength: safeContent.length });
            
            fortuneHTML = accuracyMessage + `
                <div class="fortune-section main-fortune">
                    <h3 class="fortune-title">${cleanTitle}</h3>
                    <div class="fortune-content-body">
                        ${safeContent}
                    </div>
                </div>
            `;
        } else {
            // 시뮬레이션 운세
            const dynamicFortune = await generateFortune(
                fortuneType, 
                birthYear, 
                currentUser ? currentUser.birthTime : '모름', 
                userZodiac, 
                currentUser ? currentUser.gender : null,
                currentUser
            );
            const dynamicAdvice = generateAdvice(fortuneType, currentUser);
            const dynamicLucky = generateLuckyItems(fortuneType, userZodiac);
            
            fortuneHTML = accuracyMessage + `
                <div class="fortune-section main-fortune">
                    <h3>📜 운세</h3>
                    <p>${dynamicFortune}</p>
                </div>
                
                <div class="fortune-section advice-section">
                    <h3>✅ 조언</h3>
                    <ul>
                        ${dynamicAdvice.map(item => `<li>${item}</li>`).join('')}
                    </ul>
                </div>
                
                <div class="fortune-section lucky-section">
                    <h3>🧧 오늘의 행운</h3>
                    <div class="lucky-items">
                        <div class="lucky-item">
                            <span class="lucky-label">행운의 색깔:</span>
                            <span class="lucky-value" style="color: ${dynamicLucky.color}; font-weight: bold;">${dynamicLucky.color}</span>
                        </div>
                        <div class="lucky-item">
                            <span class="lucky-label">행운의 숫자:</span>
                            <span class="lucky-value">${dynamicLucky.number}</span>
                        </div>
                        <div class="lucky-item">
                            <span class="lucky-label">행운의 아이템:</span>
                            <span class="lucky-value">${dynamicLucky.item}</span>
                        </div>
                    </div>
                </div>
            `;
        }
    }

    // 🛡️ 운세 텍스트 안전 표시
    const fortuneTextElement = document.getElementById('fortune-text');
    
    if (!fortuneTextElement) {
        console.error('❌ fortune-text 요소를 찾을 수 없음');
        showToast('⚠️ 화면 요소를 찾을 수 없습니다. 페이지를 새로고침해 주세요.');
        return;
    }
    
    // 🔍 최종 HTML 검증 (undefined, [object Object] 방지)
    if (!fortuneHTML || fortuneHTML.trim() === '' || 
        fortuneHTML.includes('undefined') || 
        fortuneHTML.includes('[object Object]')) {
        
        console.error('❌ 최종 HTML에 문제 발생:', { 
            isEmpty: !fortuneHTML, 
            isBlank: fortuneHTML?.trim() === '',
            hasUndefined: fortuneHTML?.includes('undefined'),
            hasObjectString: fortuneHTML?.includes('[object Object]'),
            content: fortuneHTML?.substring(0, 200) + '...'
        });
        
        fortuneHTML = `<div class="error-message">
            <p>⚠️ 운세를 불러오는 데 문제가 발생했습니다. 다시 시도해주세요.</p>
            <small>렌더링 오류 - 객체 변환 실패</small>
        </div>`;
    }
    
    // HTML 설정
    fortuneTextElement.innerHTML = fortuneHTML;
    
    // 🔍 설정 후 추가 검증 (undefined, [object Object] 텍스트 검사)
    setTimeout(() => {
        const displayedText = fortuneTextElement.textContent || '';
        const displayedHTML = fortuneTextElement.innerHTML || '';
        
        if (displayedText.includes('undefined') || displayedText.includes('[object Object]')) {
            console.error('❌ 화면에 잘못된 텍스트 발견:', {
                hasUndefined: displayedText.includes('undefined'),
                hasObjectString: displayedText.includes('[object Object]'),
                textSample: displayedText.substring(0, 200),
                htmlSample: displayedHTML.substring(0, 200)
            });
            
            fortuneTextElement.innerHTML = `<div class="error-message">
                <p>⚠️ 운세를 불러오는 데 문제가 발생했습니다. 다시 시도해주세요.</p>
                <small>표시 오류 - 객체 변환 실패</small>
            </div>`;
        }
    }, 100);

    // 로딩 애니메이션 정리
    hideAPILoadingMessage();

    // 페이지 전환
    showPage('fortune-result');
}

// 동적 궁합 결과 생성 함수
async function generateCompatibilityResult() {
    // TODO: Replace this simulation with actual API call:
    // const response = await fetch('/api/saju/compatibility', { 
    //     method: 'POST', 
    //     headers: { 'Content-Type': 'application/json' },
    //     body: JSON.stringify({ user: currentUser, partner: currentPartner })
    // });
    // return response.json().compatibilityHTML;
    // 동적 궁합 점수 계산 (출생년도, 띠, 성별 등을 고려)
    const myYear = new Date(currentUser.birthDate).getFullYear();
    const partnerYear = new Date(currentPartner.birthDate).getFullYear();
    const myZodiac = getUserZodiac(currentUser);
    const partnerZodiac = getUserZodiac(currentPartner);
    
    // 년도 차이 계산
    const ageDiff = Math.abs(myYear - partnerYear);
    let baseScore = 75; // 기본 점수
    
    // 띠 궁합 점수 조정
    const zodiacCompatibility = calculateZodiacCompatibility(myZodiac, partnerZodiac);
    baseScore += zodiacCompatibility;
    
    // 나이 차이 점수 조정
    if (ageDiff === 0) baseScore += 5; // 동갑
    else if (ageDiff <= 3) baseScore += 3; // 3살 이하 차이
    else if (ageDiff <= 6) baseScore += 0; // 6살 이하 차이
    else if (ageDiff <= 12) baseScore -= 5; // 12살 이하 차이
    else baseScore -= 10; // 12살 초과 차이
    
    // 최종 점수 범위 조정 (40-100)
    const finalScore = Math.max(40, Math.min(100, baseScore + Math.floor(Math.random() * 21) - 10));
    
    // 동적 궁합 텍스트 생성 (await 추가)
    const compatibilityFortune = await generateFortune('compatibility', myYear, currentUser.birthTime, myZodiac, currentUser.gender);
    const compatibilityAdvice = await generateAdvice('compatibility', { user: currentUser, partner: currentPartner });
    
    // 점수별 결론 텍스트
    let conclusionText = '';
    if (finalScore >= 90) conclusionText = '천생연분! 매우 좋은 궁합';
    else if (finalScore >= 80) conclusionText = '운명적인 만남, 훌륭한 궁합';
    else if (finalScore >= 70) conclusionText = '서로를 성장시키는 좋은 궁합';
    else if (finalScore >= 60) conclusionText = '안정적이고 조화로운 궁합';
    else if (finalScore >= 50) conclusionText = '노력하면 발전할 수 있는 궁합';
    else conclusionText = '이해와 소통이 중요한 궁합';
    
    // 점수에 따른 색상 결정
    let scoreColor = '';
    if (finalScore >= 90) scoreColor = '#ff6b6b';
    else if (finalScore >= 80) scoreColor = '#ff8787';
    else if (finalScore >= 70) scoreColor = '#ffa8a8';
    else if (finalScore >= 60) scoreColor = '#ffc9c9';
    else scoreColor = '#ffe0e0';
    
    // 띠 궁합 분석
    const zodiacAnalysis = getZodiacCompatibilityAnalysis(myZodiac, partnerZodiac);
    
    return `
        <div class="compatibility-result">
            <div class="compatibility-header">
                <h2>👫 궁합 결과</h2>
                <p class="zodiac-match">${myZodiac} ♥ ${partnerZodiac}</p>
            </div>
            
            <div class="compatibility-score">
                <div class="score-circle" style="background: linear-gradient(45deg, ${scoreColor}, #fff)">
                    <span class="score-number">${finalScore}</span>
                    <span class="score-text">점</span>
                </div>
                <p class="score-conclusion">${conclusionText}</p>
            </div>
            
            <div class="fortune-section compatibility-section">
                <h3>💖 두 사람의 관계</h3>
                <p>${compatibilityFortune}</p>
            </div>
            
            <div class="fortune-section zodiac-analysis-section">
                <h3>🔮 띠 궁합 분석</h3>
                <p>${zodiacAnalysis}</p>
            </div>
            
            <div class="fortune-section advice-section">
                <h3>💡 관계 발전 조언</h3>
                <ul>
                    ${compatibilityAdvice.map(item => `<li>${item}</li>`).join('')}
                </ul>
            </div>
            
            <div class="fortune-section summary-section">
                <h3>📝 종합 평가</h3>
                <p>두 분의 궁합 점수는 <strong>${finalScore}점</strong>으로 "${conclusionText}"입니다. 
                ${finalScore >= 80 ? '매우 좋은 궁합으로 서로에게 큰 힘이 되어줄 수 있는 관계입니다. 자연스럽게 흘러가는 관계의 흐름을 믿고 함께 성장해나가세요.' : 
                  finalScore >= 60 ? '좋은 궁합으로 서로를 이해하고 배려한다면 행복한 관계를 만들어갈 수 있습니다. 소통을 통해 더욱 깊은 유대감을 형성해보세요.' : 
                  '서로 다른 점이 많지만 이해와 소통을 통해 좋은 관계로 발전시킬 수 있습니다. 인내심을 갖고 천천히 서로를 알아가는 시간이 필요합니다.'}</p>
            </div>
        </div>
    `;
}

// 띠별 궁합 점수 계산
function calculateZodiacCompatibility(zodiac1, zodiac2) {
    const compatibilityMatrix = {
        '쥐띠': { '용띠': 15, '원숭이띠': 12, '소띠': 10, '쥐띠': 8, '돼지띠': 5, '닭띠': 3, '뱀띠': 0, '말띠': -5, '양띠': -3, '호랑이띠': -8, '토끼띠': -5, '개띠': -10 },
        '소띠': { '뱀띠': 15, '닭띠': 12, '쥐띠': 10, '소띠': 8, '토끼띠': 5, '용띠': 3, '말띠': 0, '돼지띠': -3, '개띠': -5, '호랑이띠': -8, '원숭이띠': -5, '양띠': -10 },
        '호랑이띠': { '말띠': 15, '개띠': 12, '돼지띠': 10, '호랑이띠': 8, '토끼띠': 5, '용띠': 3, '양띠': 0, '닭띠': -3, '쥐띠': -5, '소띠': -8, '뱀띠': -5, '원숭이띠': -10 },
        '토끼띠': { '양띠': 15, '돼지띠': 12, '개띠': 10, '토끼띠': 8, '호랑이띠': 5, '뱀띠': 3, '원숭이띠': 0, '용띠': -3, '소띠': -5, '말띠': -8, '닭띠': -5, '쥐띠': -10 },
        '용띠': { '닭띠': 15, '쥐띠': 12, '원숭이띠': 10, '용띠': 8, '뱀띠': 5, '호랑이띠': 3, '돼지띠': 0, '토끼띠': -3, '개띠': -5, '양띠': -8, '소띠': -5, '말띠': -10 },
        '뱀띠': { '소띠': 15, '닭띠': 12, '원숭이띠': 10, '뱀띠': 8, '용띠': 5, '쥐띠': 3, '토끼띠': 0, '개띠': -3, '양띠': -5, '돼지띠': -8, '말띠': -5, '호랑이띠': -10 },
        '말띠': { '호랑이띠': 15, '개띠': 12, '양띠': 10, '말띠': 8, '뱀띠': 5, '토끼띠': 3, '닭띠': 0, '용띠': -3, '돼지띠': -5, '쥐띠': -8, '소띠': -5, '원숭이띠': -10 },
        '양띠': { '토끼띠': 15, '돼지띠': 12, '말띠': 10, '양띠': 8, '원숭이띠': 5, '뱀띠': 3, '개띠': 0, '소띠': -3, '호랑이띠': -5, '닭띠': -8, '용띠': -5, '쥐띠': -10 },
        '원숭이띠': { '쥐띠': 15, '용띠': 12, '뱀띠': 10, '원숭이띠': 8, '양띠': 5, '소띠': 3, '돼지띠': 0, '말띠': -3, '토끼띠': -5, '개띠': -8, '닭띠': -5, '호랑이띠': -10 },
        '닭띠': { '소띠': 15, '뱀띠': 12, '용띠': 10, '닭띠': 8, '쥐띠': 5, '원숭이띠': 3, '호랑이띠': 0, '양띠': -3, '말띠': -5, '돼지띠': -8, '개띠': -5, '토끼띠': -10 },
        '개띠': { '호랑이띠': 15, '말띠': 12, '토끼띠': 10, '개띠': 8, '돼지띠': 5, '양띠': 3, '소띠': 0, '뱀띠': -3, '원숭이띠': -5, '닭띠': -8, '쥐띠': -5, '용띠': -10 },
        '돼지띠': { '토끼띠': 15, '양띠': 12, '호랑이띠': 10, '돼지띠': 8, '개띠': 5, '쥐띠': 3, '뱀띠': 0, '원숭이띠': -3, '닭띠': -5, '말띠': -8, '용띠': -5, '소띠': -10 }
    };
    
    return compatibilityMatrix[zodiac1] ? (compatibilityMatrix[zodiac1][zodiac2] || 0) : 0;
}

// 띠 궁합 분석 텍스트
function getZodiacCompatibilityAnalysis(zodiac1, zodiac2) {
    const analyses = {
        high: [
            `${zodiac1}와 ${zodiac2}는 천생연분의 조합입니다. 서로의 장점을 극대화시켜주는 완벽한 궁합으로, 함께 있으면 더 나은 사람이 될 수 있습니다.`,
            `두 띠는 서로를 깊이 이해하고 지지해주는 이상적인 관계입니다. 가치관과 인생관이 잘 맞아 안정적이고 행복한 관계를 만들어갈 수 있습니다.`,
            `${zodiac1}의 성향과 ${zodiac2}의 특징이 완벽하게 조화를 이룹니다. 서로에게 부족한 부분을 채워주며 함께 성장할 수 있는 최고의 파트너입니다.`
        ],
        medium: [
            `${zodiac1}와 ${zodiac2}는 노력하면 좋은 관계로 발전할 수 있는 궁합입니다. 서로 다른 점이 있지만 이해하려는 마음이 있다면 조화로운 관계가 됩니다.`,
            `두 띠는 각각의 개성이 뚜렷하지만, 서로를 존중하고 배려한다면 균형잡힌 관계를 만들 수 있습니다. 소통이 관계 발전의 열쇠입니다.`,
            `${zodiac1}과 ${zodiac2}는 서로에게서 새로운 것을 배울 수 있는 관계입니다. 차이점을 단점으로 보지 말고 서로를 보완하는 요소로 받아들이세요.`
        ],
        low: [
            `${zodiac1}와 ${zodiac2}는 성향 차이가 큰 조합입니다. 하지만 이러한 차이가 서로에게 새로운 자극과 성장의 기회가 될 수 있습니다.`,
            `두 띠는 가치관이 다를 수 있지만, 인내심과 이해심을 바탕으로 천천히 관계를 발전시켜나간다면 의미 있는 인연이 될 수 있습니다.`,
            `${zodiac1}과 ${zodiac2}는 서로 다른 세계관을 가지고 있지만, 이것이 오히려 서로를 더욱 넓은 시각으로 바라볼 수 있게 도와줄 것입니다.`
        ]
    };
    
    const compatibility = calculateZodiacCompatibility(zodiac1, zodiac2);
    if (compatibility >= 10) {
        return analyses.high[Math.floor(Math.random() * analyses.high.length)];
    } else if (compatibility >= 0) {
        return analyses.medium[Math.floor(Math.random() * analyses.medium.length)];
    } else {
        return analyses.low[Math.floor(Math.random() * analyses.low.length)];
    }
}

// 생년월일 정보 포맷팅
function formatBirthInfo(user) {
    // Date 객체의 타임존 문제를 피하기 위해 문자열을 직접 파싱
    const dateParts = user.birthDate.split('-');
    const year = dateParts[0];
    const month = parseInt(dateParts[1], 10);
    const day = parseInt(dateParts[2], 10);
    
    const timeText = (user.birthTime === '모름' || user.birthTime === 'unknown') ? '시간 모름' : user.birthTime;
    const calendarTypeText = user.calendarType === 'solar' ? '양력' : '음력';
    const genderText = user.gender === 'male' ? '남성' : user.gender === 'female' ? '여성' : '';
    
    // 디버깅용 로그
    console.log('📅 formatBirthInfo - 원본 데이터:', {
        birthDate: user.birthDate,
        calendarType: user.calendarType,
        parsed: { year, month, day }
    });
    
    // 음력/양력 변환은 백엔드에서 처리되므로 프론트엔드에서는 입력한 날짜만 표시
    return `${year}년 ${month}월 ${day}일 ${timeText} ${calendarTypeText} ${genderText}`.trim();
}

// 궁합 입력 폼 처리
function handleCompatibilityFormSubmit(e) {
    e.preventDefault();
    
    const partnerBirthDate = document.getElementById('partner-birth-date').value;
    const partnerBirthTime = document.getElementById('partner-birth-time').value;
    const partnerGender = document.getElementById('partner-gender').value;
    const partnerCalendarType = document.querySelector('input[name="partner-calendar-type"]:checked').value;

    if (!partnerBirthDate || !partnerBirthTime) {
        alert('상대방의 생년월일과 출생시간을 모두 선택해주세요.');
        return;
    }

    // 상대방 데이터 저장 (음력/양력 변환은 백엔드에서 처리)
    currentPartner = {
        birthDate: partnerBirthDate,  // 원본 날짜 (음력이면 음력 그대로)
        birthTime: (partnerBirthTime === 'unknown' || partnerBirthTime === '') ? '모름' : partnerBirthTime,
        gender: partnerGender,
        calendarType: partnerCalendarType  // 'solar' 또는 'lunar'
    };

    // 궁합 결과 표시
    setTimeout(async () => {
        try {
            await showFortuneResult('compatibility', true);
        } catch (error) {
            console.error('궁합 결과 표시 중 오류:', error);
            showToast('궁합을 불러오는 중 오류가 발생했습니다. 다시 시도해주세요.');
        }
    }, 100);
}

// 소원 입력 폼 처리
async function handleWishFormSubmit(e) {
    e.preventDefault();
    
    const wishText = document.getElementById('wish-text').value.trim();
    
    if (!wishText) {
        alert('소원을 입력해주세요.');
        return;
    }

    // 소원을 임시 저장
    sessionStorage.setItem('currentWish', wishText);
    
    // 소원 운세 결과 표시
    try {
        await showFortuneResult('wish-fortune');
    } catch (error) {
        console.error('소원 운세 표시 중 오류:', error);
        showToast('소원 운세를 불러오는 중 오류가 발생했습니다. 다시 시도해주세요.');
    }
}

// 메인 페이지로 돌아가기
function goToMain() {
    showPage('main');
    currentPartner = null; // 궁합 데이터 초기화
}

// 달력 구분 변경 처리 (메인 사용자)
function handleCalendarTypeChange(e) {
    const note = document.getElementById('lunar-conversion-note');
    if (e.target.value === 'lunar') {
        note.classList.add('show');
    } else {
        note.classList.remove('show');
    }
}

// 달력 구분 변경 처리 (궁합 상대방)
function handlePartnerCalendarTypeChange(e) {
    const note = document.getElementById('partner-lunar-conversion-note');
    if (e.target.value === 'lunar') {
        note.classList.add('show');
    } else {
        note.classList.remove('show');
    }
}

// 결과 공유하기
function shareResult() {
    const fortuneTitle = document.getElementById('fortune-title').textContent;
    const shareText = `도사운세에서 ${fortuneTitle}을 확인했어요! https://dosacompany.com`;
    
    if (navigator.share) {
        navigator.share({
            title: '도사운세',
            text: shareText,
            url: window.location.href
        });
    } else {
        // Web Share API를 지원하지 않는 경우
        if (navigator.clipboard) {
            navigator.clipboard.writeText(shareText).then(() => {
                alert('링크가 복사되었습니다!');
            });
        } else {
            // 클립보드 API도 지원하지 않는 경우
            const textArea = document.createElement('textarea');
            textArea.value = shareText;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            alert('링크가 복사되었습니다!');
        }
    }
}

// 운세 결과를 이미지로 저장하기
function saveResultImage() {
    // 저장할 운세 결과 요소 찾기
    const fortuneResultContainer = document.querySelector('#fortune-result-page .fortune-content');
    
    if (!fortuneResultContainer) {
        alert('운세 결과를 찾을 수 없습니다.');
        return;
    }
    
    // 로딩 메시지 표시
    const loadingToast = showToast('🖼️ 이미지를 생성하는 중입니다...', 'info');
    
    // html2canvas로 이미지 생성
    html2canvas(fortuneResultContainer, {
        backgroundColor: '#ffffff',
        scale: 2, // 고화질을 위해 2배 스케일
        useCORS: true,
        allowTaint: true,
        width: fortuneResultContainer.scrollWidth,
        height: fortuneResultContainer.scrollHeight,
        scrollX: 0,
        scrollY: 0
    }).then(canvas => {
        // 로딩 토스트 제거
        if (loadingToast) {
            loadingToast.remove();
        }
        
        // 캔버스를 이미지로 변환
        canvas.toBlob(function(blob) {
            // 파일명 생성 (운세 제목 + 날짜)
            const fortuneTitle = document.getElementById('fortune-title').textContent || '운세결과';
            const today = new Date().toISOString().split('T')[0];
            const filename = `도사운세_${fortuneTitle}_${today}.png`;
            
            if (navigator.share && navigator.canShare && navigator.canShare({ files: [new File([blob], filename, { type: 'image/png' })] })) {
                // 웹 공유 API를 지원하는 경우 (모바일)
                const file = new File([blob], filename, { type: 'image/png' });
                navigator.share({
                    title: '도사운세 결과',
                    text: `${fortuneTitle} 결과를 확인해보세요!`,
                    files: [file]
                }).catch(err => {
                    console.log('공유가 취소되었습니다.', err);
                    // 공유 실패시 다운로드로 대체
                    downloadImage(blob, filename);
                });
            } else {
                // 웹 공유 API를 지원하지 않는 경우 (데스크톱)
                downloadImage(blob, filename);
            }
        }, 'image/png');
    }).catch(error => {
        // 로딩 토스트 제거
        if (loadingToast) {
            loadingToast.remove();
        }
        console.error('이미지 생성 실패:', error);
        showToast('⚠️ 이미지 생성에 실패했습니다. 다시 시도해주세요.', 'error');
    });
}

// 이미지 다운로드 헬퍼 함수
function downloadImage(blob, filename) {
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    showToast('✅ 운세 이미지가 저장되었습니다!', 'success');
}

// 모달 관련 함수들
function showModal(type) {
    const modal = document.getElementById('modal');
    const modalBody = document.getElementById('modal-body');
    
    let content = '';
    switch(type) {
        case 'terms':
            content = `
                <h2>이용약관</h2>
                <p>도사운세 서비스 이용약관입니다.</p>
                <p>본 서비스는 엔터테인먼트 목적으로 제공되며, 운세 결과는 참고용으로만 활용해주시기 바랍니다.</p>
                <p>개인정보는 안전하게 보호되며, 서비스 이용 목적으로만 사용됩니다.</p>
            `;
            break;
        case 'privacy':
            content = `
                <h2>개인정보처리방침</h2>
                <p>도사운세는 사용자의 개인정보를 안전하게 보호합니다.</p>
                <p>수집하는 정보: 생년월일, 출생시간, 성별</p>
                <p>이용목적: 운세 서비스 제공</p>
                <p>보관기간: 서비스 이용 기간</p>
                <p>정보는 브라우저 로컬스토리지에 저장되며 서버로 전송되지 않습니다.</p>
            `;
            break;
        case 'contact':
            content = `
                <h2>고객센터</h2>
                <p>도사운세 고객센터입니다.</p>
                <p>📧 이메일: contact@dosacompany.com</p>
                <p>📞 전화: 02-0000-0000</p>
                <p>⏰ 운영시간: 평일 09:00 - 18:00</p>
                <p>문의사항이나 건의사항이 있으시면 언제든 연락주세요.</p>
            `;
            break;
    }
    
    modalBody.innerHTML = content;
    modal.style.display = 'block';
}

function closeModal() {
    document.getElementById('modal').style.display = 'none';
}

// 모달 외부 클릭시 닫기
window.onclick = function(event) {
    const modal = document.getElementById('modal');
    if (event.target === modal) {
        closeModal();
    }
}

// 사용자 정보 초기화 기능
function resetUserData() {
    if (confirm('저장된 생년월일 정보를 초기화하시겠습니까?\n다시 입력해야 합니다.')) {
        // localStorage에서 사용자 데이터 제거
        localStorage.removeItem('dosaUserData');
        
        // 현재 사용자 정보 초기화
        currentUser = null;
        currentPartner = null;
        
        // 성공 메시지 표시
        showToast('생년월일 정보가 초기화되었습니다.');
        
        // 생년월일 입력 페이지로 이동
        setTimeout(() => {
            showPage('birth-input');
        }, 1000);
    }
}

// 토스트 알림 표시
function showToast(message) {
    // 기존 토스트가 있으면 제거
    const existingToast = document.querySelector('.toast');
    if (existingToast) {
        existingToast.remove();
    }
    
    // 토스트 생성
    const toast = document.createElement('div');
    toast.className = 'toast';
    toast.textContent = message;
    
    // 페이지에 추가
    document.body.appendChild(toast);
    
    // 애니메이션을 위한 지연
    setTimeout(() => {
        toast.classList.add('show');
    }, 100);
    
    // 메시지 길이에 따라 지속 시간 조정
    const duration = message.includes('변환') ? 2000 : 3000;
    
    // 지정된 시간 후 제거
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300);
    }, duration);
}

// 음력 → 양력 변환 함수 (한국 전통 달력 기준)
function convertLunarToSolar(lunarDateStr) {
    const lunarDate = new Date(lunarDateStr);
    const year = lunarDate.getFullYear();
    const month = lunarDate.getMonth() + 1;
    const day = lunarDate.getDate();
    
    // 음력-양력 변환 시뮬레이션 로직
    // 실제 환경에서는 정확한 천문학적 계산 라이브러리 사용 필요
    
    // 기본적인 변환 규칙 (근사치):
    // 음력은 대략 양력보다 19-50일 정도 늦음 (연도와 월에 따라 다름)
    
    let solarYear = year;
    let solarMonth = month;
    let solarDay = day;
    
    // 월별 보정값 (대략적인 음력-양력 차이)
    const monthCorrection = {
        1: 30,  // 1월은 약 30일 늦음
        2: 28,  // 2월은 약 28일 늦음
        3: 30,  // 3월은 약 30일 늦음
        4: 29,  // 4월은 약 29일 늦음
        5: 30,  // 5월은 약 30일 늦음
        6: 29,  // 6월은 약 29일 늦음
        7: 30,  // 7월은 약 30일 늦음
        8: 29,  // 8월은 약 29일 늦음
        9: 30,  // 9월은 약 30일 늦음
        10: 29, // 10월은 약 29일 늦음
        11: 30, // 11월은 약 30일 늦음
        12: 29  // 12월은 약 29일 늦음
    };
    
    // 보정값 적용
    const correction = monthCorrection[month] || 30;
    solarDay += correction;
    
    // 월 경계 처리
    const daysInMonth = new Date(solarYear, solarMonth, 0).getDate();
    if (solarDay > daysInMonth) {
        solarDay -= daysInMonth;
        solarMonth++;
        
        // 연도 경계 처리
        if (solarMonth > 12) {
            solarMonth = 1;
            solarYear++;
        }
    }
    
    // 결과 날짜 생성
    const solarDateResult = new Date(solarYear, solarMonth - 1, solarDay);
    return solarDateResult.toISOString().split('T')[0]; // YYYY-MM-DD 형식으로 반환
}

// 정확한 음력-양력 변환을 위한 참조 데이터 (일부 연도)
// 실제 구현에서는 더 완전한 데이터베이스나 라이브러리 사용 권장
const lunarSolarReference = {
    2024: {
        "01-01": "02-10", // 2024년 음력 1월 1일 = 양력 2월 10일 (설날)
        "01-15": "02-24", // 음력 1월 15일 = 양력 2월 24일 (정월대보름)
        "08-15": "09-17", // 음력 8월 15일 = 양력 9월 17일 (추석)
    },
    2023: {
        "01-01": "01-22", // 2023년 음력 1월 1일 = 양력 1월 22일
        "08-15": "09-29", // 음력 8월 15일 = 양력 9월 29일
    }
};

// 더 정확한 변환이 필요한 경우 사용할 수 있는 참조 함수
function getAccurateConversion(year, month, day) {
    const yearData = lunarSolarReference[year];
    if (yearData) {
        const key = `${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
        if (yearData[key]) {
            return `${year}-${yearData[key]}`;
        }
    }
    return null; // 참조 데이터에 없는 경우
}

// 키보드 이벤트 (ESC로 모달 닫기)
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        closeModal();
    }
}); 

// 띠별 개인화 요소
function getZodiacInfluence(zodiac) {
    const influences = {
        '쥐띠': '기민함과 적응력이 특히 도움이 될 것입니다.',
        '소띠': '꾸준함과 성실함이 좋은 결과를 가져다줄 것입니다.',
        '호랑이띠': '용기와 리더십을 발휘할 기회가 있을 것입니다.',
        '토끼띠': '섬세함과 배려심이 빛을 발할 것입니다.',
        '용띠': '카리스마와 창조력이 최고조에 달할 것입니다.',
        '뱀띠': '지혜롭고 신중한 판단이 성공의 열쇠가 될 것입니다.',
        '말띠': '자유로운 영혼과 행동력이 새로운 기회를 만들 것입니다.',
        '양띠': '온화함과 예술적 감각이 주변에 좋은 영향을 줄 것입니다.',
        '원숭이띠': '창의적 아이디어와 재치가 문제 해결에 도움이 될 것입니다.',
        '닭띠': '성실함과 정확성이 인정받는 하루가 될 것입니다.',
        '개띠': '충성심과 신뢰성이 관계 발전에 큰 도움이 될 것입니다.',
        '돼지띠': '관대함과 포용력이 복을 불러올 것입니다.'
    };
    return influences[zodiac] || '';
}

// 출생시간별 개인화 요소
function getTimeInfluence(birthTime) {
    const hour = parseInt(birthTime.split(':')[0]);
    
    if (hour >= 23 || hour < 1) return '자시 태생의 특성상 직감력이 뛰어난 하루가 될 것입니다.';
    if (hour >= 1 && hour < 3) return '축시의 영향으로 끈기 있는 노력이 빛을 발할 것입니다.';
    if (hour >= 3 && hour < 5) return '인시 태생답게 용기 있는 도전이 좋은 결과를 가져올 것입니다.';
    if (hour >= 5 && hour < 7) return '묘시의 기운으로 섬세한 관찰력이 도움이 될 것입니다.';
    if (hour >= 7 && hour < 9) return '진시 태생의 특성상 활동적인 하루가 예상됩니다.';
    if (hour >= 9 && hour < 11) return '사시의 영향으로 소통능력이 뛰어난 하루가 될 것입니다.';
    if (hour >= 11 && hour < 13) return '오시 태생답게 리더십을 발휘할 기회가 있을 것입니다.';
    if (hour >= 13 && hour < 15) return '미시의 기운으로 예술적 감각이 빛날 것입니다.';
    if (hour >= 15 && hour < 17) return '신시 태생의 특성상 조직적인 사고가 도움이 될 것입니다.';
    if (hour >= 17 && hour < 19) return '유시의 영향으로 사교성이 빛나는 하루가 될 것입니다.';
    if (hour >= 19 && hour < 21) return '술시 태생답게 책임감 있는 행동이 인정받을 것입니다.';
    if (hour >= 21 && hour < 23) return '해시의 기운으로 깊이 있는 사고가 좋은 결과를 가져올 것입니다.';
    
    return '';
}

// 동적 조언 생성
function generateAdvice(category, userData) {
    const adviceTemplates = {
        today: [
            "오늘은 새로운 도전을 두려워하지 마세요",
            "감정적 판단보다 이성적 사고를 우선하세요",
            "주변 사람들과의 소통에 더 많은 시간을 투자하세요",
            "건강관리를 위해 충분한 휴식을 취하시기 바랍니다",
            "작은 성취에도 스스로를 칭찬해주세요",
            "직감을 믿되 신중한 판단도 함께 하세요"
        ],
        tomorrow: [
            "내일을 위한 준비를 차근차근 해보세요",
            "긍정적인 마음가짐으로 하루를 시작하세요",
            "가족이나 친구들과의 약속을 소중히 여기세요",
            "새로운 기회에 열린 마음으로 대비하세요"
        ],
        month: [
            "이번 달의 목표를 구체적으로 설정해보세요",
            "꾸준함이 가장 큰 성공의 열쇠임을 기억하세요",
            "인간관계에 더 많은 관심과 시간을 투자하세요",
            "자기계발을 위한 시간을 꼭 확보하시기 바랍니다"
        ],
        year: [
            "장기적인 관점에서 인생 계획을 세워보세요",
            "건강관리를 최우선으로 생각하시기 바랍니다",
            "새로운 기술이나 지식 습득에 관심을 가져보세요",
            "가족과의 소중한 시간을 늘려가시기 바랍니다"
        ],
        love: [
            "진실한 마음으로 상대방에게 다가가세요",
            "외모보다 내면의 아름다움에 집중하세요",
            "서두르지 말고 자연스러운 관계 발전을 기다리세요",
            "자신을 먼저 사랑하는 법을 배우시기 바랍니다",
            "과거의 상처에 얽매이지 말고 새로운 시작을 하세요",
            "소통과 이해를 바탕으로 관계를 발전시키세요"
        ],
        wealth: [
            "충동적인 소비보다 계획적인 지출을 하세요",
            "투자보다는 안전한 저축에 우선 집중하세요",
            "부업이나 추가 수입원을 고려해보세요",
            "전문가의 재정 상담을 받아보시는 것이 좋겠습니다",
            "가계부 작성으로 지출 패턴을 파악해보세요",
            "금전 관리 습관을 체계적으로 만들어가세요"
        ],
        business: [
            "고객의 니즈를 정확히 파악하는 것이 중요합니다",
            "경쟁사 분석을 통해 차별화 포인트를 찾으세요",
            "직원들과의 소통을 늘려 조직력을 강화하세요",
            "새로운 기술 도입을 적극적으로 검토해보세요"
        ],
        study: [
            "기초를 탄탄히 하는 것부터 시작하세요",
            "꾸준한 복습이 학습 효과를 극대화합니다",
            "다른 사람들과의 토론을 통해 이해도를 높이세요",
            "실습과 이론을 균형있게 병행하시기 바랍니다"
        ],
        compatibility: [
            "서로의 차이점을 인정하고 존중하는 자세를 가지세요",
            "소통을 통해 오해를 해결하려 노력하세요",
            "상대방의 장점에 더 많은 관심을 기울이세요",
            "함께하는 시간의 질을 높이는 데 집중하세요",
            "급하게 서두르지 말고 자연스러운 발전을 기다리세요",
            "서로를 위한 배려와 희생정신을 발휘하세요"
        ],
        "zodiac-sign": [
            "당신의 띠가 가진 고유한 장점을 적극 활용하세요",
            "전통적인 지혜와 현대적 감각을 조화롭게 활용하세요",
            "같은 띠를 가진 사람들과의 교류를 늘려보세요",
            "띠의 특성에 맞는 직업이나 취미를 고려해보세요"
        ],
        "past-life": [
            "내면의 직감과 꿈에 더 많은 관심을 기울이세요",
            "새로운 분야에 대한 호기심을 적극적으로 탐구하세요",
            "선행과 베푸는 마음을 실천하려 노력하세요",
            "정신적 성장을 위한 수행이나 명상을 시작해보세요"
        ],
        "wish-fortune": [
            "소원을 이루기 위한 구체적인 계획을 세우세요",
            "긍정적인 마음가짐을 지속적으로 유지하세요",
            "다른 사람들의 소원도 함께 응원해주세요",
            "현실적인 목표와 꿈의 균형을 잘 맞추세요"
        ],
        constellation: [
            "별자리의 에너지를 활용해 창의력을 발휘하세요",
            "우주의 리듬에 맞춰 자연스러운 삶을 살아보세요",
            "직감력을 믿고 중요한 결정을 내려보세요",
            "명상이나 요가로 내면의 평화를 찾아보세요"
        ],
        lifetime: [
            "인생의 큰 그림을 그려보고 단계별 목표를 세우세요",
            "건강한 생활 습관으로 긴 인생을 준비하세요",
            "좋은 인연들을 소중히 여기고 관계를 발전시키세요",
            "지속적인 자기계발로 성장하는 삶을 살아가세요"
        ],
        tojung: [
            "전통적인 지혜를 현대 생활에 접목해보세요",
            "방향과 타이밍을 중요하게 고려하여 결정하세요",
            "연장자들의 조언에 귀 기울이는 겸손함을 가지세요",
            "자연의 순리에 따라 무리하지 않는 삶을 살아보세요"
        ]
    };
    
    const templates = adviceTemplates[category] || adviceTemplates.today;
    return templates.sort(() => Math.random() - 0.5).slice(0, 2);
}

// 동적 행운 요소 생성
function generateLuckyItems(category, zodiac) {
    const colors = ['빨간색', '파란색', '노란색', '초록색', '보라색', '주황색', '분홍색', '하늘색', '금색', '은색'];
    const numbers = ['1', '3', '7', '9', '11', '21', '33', '77', '99'];
    const items = [
        '작은 크리스탈', '향초', '관엽식물', '예쁜 노트', '시계', 
        '반지', '목걸이', '책갈피', '미니어처', '부적',
        '꽃다발', '커피잔', '향수', '스카프', '모자'
    ];
    
    return {
        color: colors[Math.floor(Math.random() * colors.length)],
        number: numbers[Math.floor(Math.random() * numbers.length)],
        item: items[Math.floor(Math.random() * items.length)]
    };
}

// 소원 기반 운세 생성
function generateWishFortune(wish, birthYear, zodiac) {
    if (!wish) return generateFortune('wish-fortune', birthYear, 'unknown', zodiac, null);
    
    // 소원의 키워드 분석
    const keywords = {
        love: ['사랑', '연애', '결혼', '남자친구', '여자친구', '배우자', '만남', '인연'],
        money: ['돈', '재물', '부자', '돈벌기', '수입', '월급', '투자', '복권', '대박'],
        job: ['취업', '직업', '회사', '승진', '직장', '면접', '이직', '창업', '사업'],
        health: ['건강', '병', '치료', '회복', '다이어트', '운동', '몸'],
        study: ['시험', '합격', '대학', '학교', '공부', '자격증', '성적', '졸업'],
        family: ['가족', '부모', '자식', '아이', '임신', '출산', '형제', '자매']
    };
    
    let category = 'general';
    let keywordFound = '';
    
    // 소원에서 키워드 찾기
    for (const [cat, words] of Object.entries(keywords)) {
        for (const word of words) {
            if (wish.includes(word)) {
                category = cat;
                keywordFound = word;
                break;
            }
        }
        if (keywordFound) break;
    }
    
    // 카테고리별 운세 템플릿
    const fortuneTemplates = {
        love: [
            `${keywordFound}에 관한 소원이군요. 사랑의 에너지가 당신 주변에 모이고 있습니다. 진실한 마음으로 다가간다면 좋은 결과가 있을 것입니다.`,
            `연인 관련 소원은 상대방의 마음도 중요합니다. 강요보다는 자연스러운 흐름을 기다리는 지혜가 필요해요.`,
            `사랑에 관한 꿈은 먼저 자신을 사랑하는 것부터 시작됩니다. 내면의 아름다움을 키워가세요.`
        ],
        money: [
            `${keywordFound}와 관련된 소원이네요. 금전운이 상승하고 있지만, 노력 없이는 이루어지지 않습니다. 체계적인 계획을 세우세요.`,
            `재물에 대한 욕심이 너무 크면 오히려 복이 달아날 수 있어요. 감사하는 마음과 함께 차근차근 모아가세요.`,
            `경제적 안정을 위한 소원은 곧 현실이 될 것입니다. 다만 인내심을 갖고 꾸준히 노력하는 것이 중요해요.`
        ],
        job: [
            `${keywordFound}에 대한 간절한 마음이 전해집니다. 준비하는 자에게 기회가 찾아올 것이니 포기하지 마세요.`,
            `직업과 관련된 소원은 실력과 인맥이 함께 필요합니다. 네트워킹에도 관심을 기울여보세요.`,
            `새로운 기회가 곧 찾아올 것입니다. 자신의 장점을 어필할 준비를 해두시기 바랍니다.`
        ],
        health: [
            `${keywordFound}에 관한 소원을 빕니다. 몸과 마음의 균형이 중요한 시기입니다. 전문가의 도움을 받는 것도 고려해보세요.`,
            `건강은 하루아침에 이루어지지 않습니다. 꾸준한 관리와 긍정적인 마음가짐이 필요해요.`,
            `치유의 기운이 당신을 감싸고 있습니다. 희망을 잃지 말고 꾸준히 노력하면 좋은 결과가 있을 것입니다.`
        ],
        study: [
            `${keywordFound}와 관련된 목표가 있으시군요. 노력하는 만큼 결과가 따를 것입니다. 기초를 탄탄히 하세요.`,
            `학업에 대한 소원은 꾸준함이 가장 중요합니다. 조급해하지 말고 차근차근 준비하시기 바랍니다.`,
            `지식에 대한 갈망이 느껴집니다. 좋은 스승이나 동료를 만나 함께 공부하면 더 큰 효과를 볼 수 있을 것입니다.`
        ],
        family: [
            `${keywordFound}에 대한 따뜻한 마음이 전해집니다. 가족의 행복은 서로에 대한 이해와 사랑에서 시작됩니다.`,
            `가족과 관련된 소원은 시간이 해결해줄 부분이 많습니다. 인내심을 갖고 기다려보세요.`,
            `가정의 화목이 모든 복의 근원입니다. 작은 관심과 배려로 시작해보시기 바랍니다.`
        ],
        general: [
            `진심어린 소원이 하늘에 닿았습니다. 포기하지 않는 마음과 꾸준한 노력이 있다면 반드시 이루어질 것입니다.`,
            `소원이 이루어지기 위해서는 때로는 예상과 다른 방법으로 올 수도 있습니다. 열린 마음으로 받아들이세요.`,
            `당신의 소원은 단순한 욕망이 아닌 성장을 위한 목표입니다. 그 과정에서 얻는 것들도 소중히 여기세요.`
        ]
    };
    
    const templates = fortuneTemplates[category] || fortuneTemplates.general;
    let baseFortune = templates[Math.floor(Math.random() * templates.length)];
    
    // 띠의 영향 추가
    if (zodiac) {
        const zodiacWish = getZodiacWishInfluence(zodiac);
        baseFortune += ` ${zodiacWish}`;
    }
    
    return baseFortune;
}

// 띠별 소원 성취 영향
function getZodiacWishInfluence(zodiac) {
    const influences = {
        '쥐띠': '쥐띠의 기민함으로 기회를 놓치지 않을 것입니다.',
        '소띠': '소띠의 끈기로 어떤 어려움도 극복할 수 있을 것입니다.',
        '호랑이띠': '호랑이띠의 용기로 과감한 도전이 성공을 가져올 것입니다.',
        '토끼띠': '토끼띠의 지혜로 신중한 선택이 좋은 결과를 만들 것입니다.',
        '용띠': '용띠의 위엄으로 큰 꿈도 현실이 될 수 있을 것입니다.',
        '뱀띠': '뱀띠의 직감으로 완벽한 타이밍을 잡을 수 있을 것입니다.',
        '말띠': '말띠의 활동력으로 빠른 진전을 이룰 수 있을 것입니다.',
        '양띠': '양띠의 온화함으로 주변의 도움을 많이 받을 수 있을 것입니다.',
        '원숭이띠': '원숭이띠의 창의력으로 독특한 방법을 찾을 수 있을 것입니다.',
        '닭띠': '닭띠의 성실함으로 착실하게 목표에 다가갈 수 있을 것입니다.',
        '개띠': '개띠의 충성심으로 신뢰할 수 있는 도움을 받을 수 있을 것입니다.',
        '돼지띠': '돼지띠의 복으로 예상보다 좋은 결과를 얻을 수 있을 것입니다.'
    };
    return influences[zodiac] || '';
}

// DOM 요소들
const mysticalIntroOverlay = document.getElementById('mystical-intro-overlay');
const birthInputPage = document.getElementById('birth-input-page');
const mainPage = document.getElementById('main-page');
const fortuneResultPage = document.getElementById('fortune-result-page');
const compatibilityInputPage = document.getElementById('compatibility-input-page');

// 페이지 초기화
document.addEventListener('DOMContentLoaded', function() {
    // 3초 후 인트로 페이지에서 다음 페이지로 전환
    setTimeout(() => {
        // 로컬 스토리지에서 사용자 데이터 확인
        const savedUser = localStorage.getItem('dosaUserData');
        if (savedUser) {
            currentUser = JSON.parse(savedUser);
            // 사용자 데이터가 있으면 메인페이지로
            showPage('main');
        } else {
            // 사용자 데이터가 없으면 입력페이지로
            showPage('birth-input');
        }
    }, 3000);

    // 이벤트 리스너 설정
    setupEventListeners();
});

// 이벤트 리스너 설정
function setupEventListeners() {
    // 생년월일 입력 폼
    const birthForm = document.getElementById('birth-form');
    birthForm.addEventListener('submit', handleBirthFormSubmit);
    
    // 달력 구분 라디오 버튼 이벤트
    const calendarTypeRadios = document.querySelectorAll('input[name="calendar-type"]');
    calendarTypeRadios.forEach(radio => {
        radio.addEventListener('change', handleCalendarTypeChange);
    });
    
    const partnerCalendarTypeRadios = document.querySelectorAll('input[name="partner-calendar-type"]');
    partnerCalendarTypeRadios.forEach(radio => {
        radio.addEventListener('change', handlePartnerCalendarTypeChange);
    });

    // 운세 카드 클릭
    const fortuneCards = document.querySelectorAll('.fortune-card');
    fortuneCards.forEach(card => {
        card.addEventListener('click', handleFortuneCardClick);
    });

    // 궁합 입력 폼
    const compatibilityForm = document.getElementById('compatibility-form');
    compatibilityForm.addEventListener('submit', handleCompatibilityFormSubmit);

    // 소원 입력 폼
    const wishForm = document.getElementById('wish-form');
    if (wishForm) {
        wishForm.addEventListener('submit', handleWishFormSubmit);
    }
}

// 페이지 전환
function showPage(pageName) {
    // 모든 페이지 숨기기
    document.querySelectorAll('.page, .mystical-intro-overlay').forEach(page => {
        page.classList.remove('active');
    });

    // 인트로 오버레이 페이드아웃
    if (currentPage === 'intro') {
        hideMysticalIntro();
    }
    
    // 모달만 닫기 (로딩은 API 응답 후에만 숨김)
    closeModal();
    
    // 인트로 오버레이만 확실히 제거
    const introOverlay = document.querySelector('.mystical-intro-overlay');
    if (introOverlay) {
        introOverlay.classList.remove('active');
        introOverlay.style.display = 'none';
    }

    // 요청된 페이지 표시
    const targetPage = document.getElementById(pageName + '-page');
    if (targetPage) {
        targetPage.classList.add('active');
        currentPage = pageName;
    }
}

// 생년월일 입력 폼 처리
function handleBirthFormSubmit(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const birthDate = formData.get('birth-date') || document.getElementById('birth-date').value;
    const birthTime = formData.get('birth-time') || document.getElementById('birth-time').value;
    const gender = document.getElementById('gender').value;
    const calendarType = document.querySelector('input[name="calendar-type"]:checked').value;

    if (!birthDate || !birthTime) {
        alert('생년월일과 출생시간을 모두 선택해주세요.');
        return;
    }

    // 사용자 데이터 저장 (음력/양력 변환은 백엔드에서 처리)
    currentUser = {
        birthDate: birthDate,  // 원본 날짜 (음력이면 음력 그대로, 양력이면 양력 그대로)
        birthTime: (birthTime === 'unknown' || birthTime === '') ? '모름' : birthTime,
        gender,
        calendarType,  // 'solar' 또는 'lunar'
        timestamp: new Date().toISOString()
    };

    // 디버깅용 로그
    console.log('💾 생년월일 입력 저장:', {
        birthDate,
        calendarType,
        gender,
        birthTime
    });

    localStorage.setItem('dosaUserData', JSON.stringify(currentUser));
    console.log('✅ localStorage에 저장 완료');
    
    // 메인 페이지로 이동
    setTimeout(() => {
        showPage('main');
    }, 100);
}

// 운세 카드 클릭 처리
async function handleFortuneCardClick(e) {
    const fortuneType = e.currentTarget.getAttribute('data-fortune');
    
    // 사용자 정보가 없으면 입력 페이지로 이동 (소원 운세는 예외)
    if (!currentUser && fortuneType !== 'wish-fortune') {
        showToast('먼저 생년월일 정보를 입력해주세요.');
        showPage('birth-input');
        return;
    }
    
    if (fortuneType === 'compatibility') {
        showCompatibilityInputPage();
    } else if (fortuneType === 'wish-fortune') {
        showPage('wish-input');
    } else {
        try {
            await showFortuneResult(fortuneType);
        } catch (error) {
            console.error('운세 결과 표시 중 오류:', error);
            showToast('운세를 불러오는 중 오류가 발생했습니다. 다시 시도해주세요.');
        }
    }
}

// 궁합 입력 페이지 표시 (내 정보 포함)
function showCompatibilityInputPage() {
    // 사용자 정보가 없으면 입력 페이지로 이동
    if (!currentUser) {
        showToast('먼저 본인의 생년월일 정보를 입력해주세요.');
        showPage('birth-input');
        return;
    }
    
    // 내 정보 표시
    const myBirthInfoDisplay = document.getElementById('my-birth-info-display');
    if (myBirthInfoDisplay && currentUser) {
        myBirthInfoDisplay.textContent = formatBirthInfo(currentUser);
    }
    
    // 궁합 입력 페이지로 이동
    showPage('compatibility-input');
}

// ==============================
// 신비로운 인트로 오버레이 관리
// ==============================

let countdownTimer = null;
let delayedLoadingTimer = null;
let isContentReady = false;
let countdownCompleted = false;

// 신비로운 인트로 초기화
function initMysticalIntro() {
    if (!mysticalIntroOverlay) return;

    // 스크롤 방지
    document.body.style.overflow = 'hidden';
    
    // data-eta 속성에서 카운트다운 시간 가져오기 (기본값: 3초)
    const etaAttribute = mysticalIntroOverlay.getAttribute('data-eta');
    const countdownDuration = parseInt(etaAttribute) || 3;
    
    // 카운트다운 시작
    setTimeout(() => {
        startCountdown(countdownDuration);
    }, 2500); // 초기 애니메이션 완료 후 시작
    
    // 15초 후 지연 메시지 표시
    delayedLoadingTimer = setTimeout(() => {
        showDelayedLoadingMessage();
    }, 15000);
    
    console.log('🔮 신비로운 인트로 오버레이 초기화 완료');
}

// 카운트다운 시작
function startCountdown(duration) {
    const countdownElement = document.getElementById('countdown-number');
    if (!countdownElement) return;
    
    let currentCount = duration;
    countdownElement.textContent = currentCount;
    
    countdownTimer = setInterval(() => {
        currentCount--;
        countdownElement.textContent = currentCount;
        
        // 카운트다운 완료
        if (currentCount <= 0) {
            clearInterval(countdownTimer);
            countdownCompleted = true;
            
            // 카운트다운 텍스트 숨기기
            const countdownContainer = document.querySelector('.mystical-countdown');
            if (countdownContainer) {
                countdownContainer.style.opacity = '0';
                countdownContainer.style.transition = 'opacity 0.4s ease-out';
            }
            
            // 컨텐츠 준비 확인
            checkReadinessAndHide();
        }
    }, 1000);
}

// 준비 상태 확인 후 오버레이 숨기기
function checkReadinessAndHide() {
    if (countdownCompleted && isContentReady) {
        setTimeout(() => {
            hideMysticalIntro();
        }, 500); // 카운트다운 텍스트가 사라진 후 약간의 딜레이
    }
}

// 컨텐츠 준비 완료 표시
function setContentReady() {
    isContentReady = true;
    console.log('📱 컨텐츠 준비 완료');
    checkReadinessAndHide();
}

// 오버레이 숨기기
function hideMysticalIntro() {
    if (!mysticalIntroOverlay) return;
    
    // 타이머 정리
    if (countdownTimer) {
        clearInterval(countdownTimer);
        countdownTimer = null;
    }
    
    if (delayedLoadingTimer) {
        clearTimeout(delayedLoadingTimer);
        delayedLoadingTimer = null;
    }
    
    // 페이드아웃 애니메이션
    mysticalIntroOverlay.classList.add('fade-out');
    
    setTimeout(() => {
        // 오버레이 숨기기
        mysticalIntroOverlay.style.display = 'none';
        
        // 스크롤 허용
        document.body.style.overflow = '';
        
        // 메인 헤딩에 포커스 (접근성)
        const mainHeading = document.querySelector('.logo');
        if (mainHeading) {
            mainHeading.focus();
            mainHeading.setAttribute('tabindex', '-1'); // 임시로 포커스 가능하게
        }
        
        console.log('✨ 신비로운 인트로 오버레이 숨김 완료');
    }, 600); // CSS 트랜지션 시간과 일치
}

// 15초 지연 시 메시지 표시
function showDelayedLoadingMessage() {
    if (!mysticalIntroOverlay || mysticalIntroOverlay.style.display === 'none') {
        return;
    }
    
    const statusElement = document.querySelector('.mystical-status');
    if (statusElement) {
        statusElement.textContent = '로딩이 지연되고 있습니다. 잠시만 더 기다려 주세요…';
        statusElement.style.animation = 'textPulse 1.5s ease-in-out infinite';
    }
    
    // 카운트다운 숨기기 (이미 0에 도달했을 가능성)
    const countdownContainer = document.querySelector('.mystical-countdown');
    if (countdownContainer && countdownCompleted) {
        countdownContainer.style.display = 'none';
    }
    
    console.log('⚠️ 로딩 지연 메시지 표시');
}

// 관리자 설정 불러오기 및 적용
async function loadSiteSettings() {
    try {
        const response = await fetch('/api/settings');
        const data = await response.json();
        
        if (data.success && data.settings) {
            const settings = data.settings;
            
            // 페이지 타이틀 변경
            if (settings.site_title) {
                document.title = settings.site_title;
            }
            
            // 헤더 로고 변경
            const logoElements = document.querySelectorAll('.logo');
            if (logoElements.length > 0 && settings.header_logo) {
                logoElements.forEach(logo => {
                    logo.textContent = settings.header_logo;
                });
            }
            
            // 헤더 서브타이틀 변경
            const subtitleElements = document.querySelectorAll('.subtitle');
            if (subtitleElements.length > 0 && settings.header_subtitle) {
                subtitleElements.forEach(subtitle => {
                    subtitle.textContent = settings.header_subtitle;
                });
            }
            
            // 유튜브 링크 변경
            const youtubeLinks = document.querySelectorAll('.youtube-btn');
            if (youtubeLinks.length > 0 && settings.youtube_url) {
                youtubeLinks.forEach(link => {
                    link.href = settings.youtube_url;
                });
            }
            
            console.log('✅ 사이트 설정 적용 완료:', settings);
        }
    } catch (error) {
        console.error('❌ 설정 로드 실패:', error);
        // 설정 로드 실패 시 기본 설정 유지
    }
}

// 페이지 로드 시 자동 초기화
document.addEventListener('DOMContentLoaded', () => {
    // 사이트 설정 로드
    loadSiteSettings();
    
    // 신비로운 인트로 초기화
    initMysticalIntro();
    
    // 컨텐츠 준비 완료 (DOM 로드 완료)
    setTimeout(() => {
        setContentReady();
    }, 1000); // 1초 후 컨텐츠 준비 완료로 간주
});

// 창 로드 완료 시에도 컨텐츠 준비 표시 (이미지 등 모든 리소스 로드 완료)
window.addEventListener('load', () => {
    setContentReady();
});